services:
  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: security-bulletins
      # POSTGRES_DB: security-bulletins
    ports:
    - 5432:5432
    volumes:
    - .docker-data/postgres/data:/var/lib/postgresql/data

  api-db-migration:
    build:
      context: .
      args:
        - cmd=migrate
    entrypoint:
      - ./wait-for-it.sh
      - db:5432
    depends_on:
      db:
        condition: service_started
    environment:
      DB_HOST: db
      DB_USER: security-bulletins
      DB_PASSWORD: pass
      DB_NAME: security-bulletins
      DB_PORT: 5432
      DB_SSLMODE: disable
    init: true

  zilla:
    image: ghcr.io/aklivity/zilla:latest
    ports:
      - "7114:7114"
    command:
      - start
      - -ve
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    volumes:
    - "./zilla/zilla.yaml:/etc/zilla/zilla.yaml"

  kafka:
    image: docker.io/bitnami/kafka:3.8
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - ".docker-data/kafka:/bitnami"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  kafka-init:
    image: docker.io/bitnami/kafka:3.8
    command:
      - "/bin/bash"
      - "-c"
      -  |
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic feed-requests && \
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic feed-responses
    depends_on:
      - kafka
    init: true

  api:
    build:
      context: .
      args:
        - cmd=internal
    command:
      - ./myapp
    depends_on:
      api-db-migration:
        condition: service_completed_successfully
    ports:
      - 8080:8080
    environment:
      PORT: 8080
      DB_HOST: db
      DB_USER: security-bulletins
      DB_PASSWORD: pass
      DB_NAME: security-bulletins
      DB_PORT: 5432
      DB_SSLMODE: disable
      BROKER_HOST: kafka:9092
