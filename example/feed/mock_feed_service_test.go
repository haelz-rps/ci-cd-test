// Code generated by mockery v2.26.1. DO NOT EDIT.

package feed

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFeedService is an autogenerated mock type for the FeedService type
type MockFeedService struct {
	mock.Mock
}

type MockFeedService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeedService) EXPECT() *MockFeedService_Expecter {
	return &MockFeedService_Expecter{mock: &_m.Mock}
}

// CreateFeed provides a mock function with given fields: ctx, feed
func (_m *MockFeedService) CreateFeed(ctx context.Context, feed *Feed) error {
	ret := _m.Called(ctx, feed)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Feed) error); ok {
		r0 = rf(ctx, feed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeedService_CreateFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeed'
type MockFeedService_CreateFeed_Call struct {
	*mock.Call
}

// CreateFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - feed *Feed
func (_e *MockFeedService_Expecter) CreateFeed(ctx interface{}, feed interface{}) *MockFeedService_CreateFeed_Call {
	return &MockFeedService_CreateFeed_Call{Call: _e.mock.On("CreateFeed", ctx, feed)}
}

func (_c *MockFeedService_CreateFeed_Call) Run(run func(ctx context.Context, feed *Feed)) *MockFeedService_CreateFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Feed))
	})
	return _c
}

func (_c *MockFeedService_CreateFeed_Call) Return(_a0 error) *MockFeedService_CreateFeed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeedService_CreateFeed_Call) RunAndReturn(run func(context.Context, *Feed) error) *MockFeedService_CreateFeed_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *MockFeedService) CreatePost(ctx context.Context, post *Post) error {
	ret := _m.Called(ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeedService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockFeedService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *Post
func (_e *MockFeedService_Expecter) CreatePost(ctx interface{}, post interface{}) *MockFeedService_CreatePost_Call {
	return &MockFeedService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *MockFeedService_CreatePost_Call) Run(run func(ctx context.Context, post *Post)) *MockFeedService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Post))
	})
	return _c
}

func (_c *MockFeedService_CreatePost_Call) Return(_a0 error) *MockFeedService_CreatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeedService_CreatePost_Call) RunAndReturn(run func(context.Context, *Post) error) *MockFeedService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeeds provides a mock function with given fields: ctx
func (_m *MockFeedService) ListFeeds(ctx context.Context) ([]Feed, error) {
	ret := _m.Called(ctx)

	var r0 []Feed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Feed, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Feed); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Feed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedService_ListFeeds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeeds'
type MockFeedService_ListFeeds_Call struct {
	*mock.Call
}

// ListFeeds is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeedService_Expecter) ListFeeds(ctx interface{}) *MockFeedService_ListFeeds_Call {
	return &MockFeedService_ListFeeds_Call{Call: _e.mock.On("ListFeeds", ctx)}
}

func (_c *MockFeedService_ListFeeds_Call) Run(run func(ctx context.Context)) *MockFeedService_ListFeeds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFeedService_ListFeeds_Call) Return(_a0 []Feed, _a1 error) *MockFeedService_ListFeeds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedService_ListFeeds_Call) RunAndReturn(run func(context.Context) ([]Feed, error)) *MockFeedService_ListFeeds_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFeedService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFeedService creates a new instance of MockFeedService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFeedService(t mockConstructorTestingTNewMockFeedService) *MockFeedService {
	mock := &MockFeedService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
