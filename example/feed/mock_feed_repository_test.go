// Code generated by mockery v2.26.1. DO NOT EDIT.

package feed

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFeedRepository is an autogenerated mock type for the FeedRepository type
type MockFeedRepository struct {
	mock.Mock
}

type MockFeedRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeedRepository) EXPECT() *MockFeedRepository_Expecter {
	return &MockFeedRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, feed
func (_m *MockFeedRepository) Create(ctx context.Context, feed *Feed) error {
	ret := _m.Called(ctx, feed)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Feed) error); ok {
		r0 = rf(ctx, feed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeedRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFeedRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - feed *Feed
func (_e *MockFeedRepository_Expecter) Create(ctx interface{}, feed interface{}) *MockFeedRepository_Create_Call {
	return &MockFeedRepository_Create_Call{Call: _e.mock.On("Create", ctx, feed)}
}

func (_c *MockFeedRepository_Create_Call) Run(run func(ctx context.Context, feed *Feed)) *MockFeedRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Feed))
	})
	return _c
}

func (_c *MockFeedRepository_Create_Call) Return(_a0 error) *MockFeedRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeedRepository_Create_Call) RunAndReturn(run func(context.Context, *Feed) error) *MockFeedRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockFeedRepository) List(ctx context.Context) ([]Feed, error) {
	ret := _m.Called(ctx)

	var r0 []Feed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Feed, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Feed); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Feed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFeedRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeedRepository_Expecter) List(ctx interface{}) *MockFeedRepository_List_Call {
	return &MockFeedRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockFeedRepository_List_Call) Run(run func(ctx context.Context)) *MockFeedRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFeedRepository_List_Call) Return(_a0 []Feed, _a1 error) *MockFeedRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedRepository_List_Call) RunAndReturn(run func(context.Context) ([]Feed, error)) *MockFeedRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockFeedRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFeedRepository creates a new instance of MockFeedRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFeedRepository(t mockConstructorTestingTNewMockFeedRepository) *MockFeedRepository {
	mock := &MockFeedRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
