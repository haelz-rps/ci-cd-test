// Package airbyteclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package airbyteclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AttemptStatus.
const (
	AttemptStatusFailed    AttemptStatus = "failed"
	AttemptStatusRunning   AttemptStatus = "running"
	AttemptStatusSucceeded AttemptStatus = "succeeded"
)

// Defines values for CheckConnectionReadStatus.
const (
	CheckConnectionReadStatusFailed    CheckConnectionReadStatus = "failed"
	CheckConnectionReadStatusSucceeded CheckConnectionReadStatus = "succeeded"
)

// Defines values for CheckOperationReadStatus.
const (
	CheckOperationReadStatusFailed    CheckOperationReadStatus = "failed"
	CheckOperationReadStatusSucceeded CheckOperationReadStatus = "succeeded"
)

// Defines values for ConnectionScheduleTimeUnit.
const (
	ConnectionScheduleTimeUnitDays    ConnectionScheduleTimeUnit = "days"
	ConnectionScheduleTimeUnitHours   ConnectionScheduleTimeUnit = "hours"
	ConnectionScheduleTimeUnitMinutes ConnectionScheduleTimeUnit = "minutes"
	ConnectionScheduleTimeUnitMonths  ConnectionScheduleTimeUnit = "months"
	ConnectionScheduleTimeUnitWeeks   ConnectionScheduleTimeUnit = "weeks"
)

// Defines values for ConnectionScheduleDataBasicScheduleTimeUnit.
const (
	ConnectionScheduleDataBasicScheduleTimeUnitDays    ConnectionScheduleDataBasicScheduleTimeUnit = "days"
	ConnectionScheduleDataBasicScheduleTimeUnitHours   ConnectionScheduleDataBasicScheduleTimeUnit = "hours"
	ConnectionScheduleDataBasicScheduleTimeUnitMinutes ConnectionScheduleDataBasicScheduleTimeUnit = "minutes"
	ConnectionScheduleDataBasicScheduleTimeUnitMonths  ConnectionScheduleDataBasicScheduleTimeUnit = "months"
	ConnectionScheduleDataBasicScheduleTimeUnitWeeks   ConnectionScheduleDataBasicScheduleTimeUnit = "weeks"
)

// Defines values for ConnectionScheduleType.
const (
	ConnectionScheduleTypeBasic  ConnectionScheduleType = "basic"
	ConnectionScheduleTypeCron   ConnectionScheduleType = "cron"
	ConnectionScheduleTypeManual ConnectionScheduleType = "manual"
)

// Defines values for ConnectionStatus.
const (
	Active     ConnectionStatus = "active"
	Deprecated ConnectionStatus = "deprecated"
	Inactive   ConnectionStatus = "inactive"
)

// Defines values for DestinationSyncMode.
const (
	Append      DestinationSyncMode = "append"
	AppendDedup DestinationSyncMode = "append_dedup"
	Overwrite   DestinationSyncMode = "overwrite"
)

// Defines values for FieldTransformTransformType.
const (
	AddField          FieldTransformTransformType = "add_field"
	RemoveField       FieldTransformTransformType = "remove_field"
	UpdateFieldSchema FieldTransformTransformType = "update_field_schema"
)

// Defines values for ImportReadStatus.
const (
	ImportReadStatusFailed    ImportReadStatus = "failed"
	ImportReadStatusSucceeded ImportReadStatus = "succeeded"
)

// Defines values for JobConfigType.
const (
	JobConfigTypeCheckConnectionDestination JobConfigType = "check_connection_destination"
	JobConfigTypeCheckConnectionSource      JobConfigType = "check_connection_source"
	JobConfigTypeDiscoverSchema             JobConfigType = "discover_schema"
	JobConfigTypeGetSpec                    JobConfigType = "get_spec"
	JobConfigTypeResetConnection            JobConfigType = "reset_connection"
	JobConfigTypeSync                       JobConfigType = "sync"
)

// Defines values for JobStatus.
const (
	JobStatusCancelled  JobStatus = "cancelled"
	JobStatusFailed     JobStatus = "failed"
	JobStatusIncomplete JobStatus = "incomplete"
	JobStatusPending    JobStatus = "pending"
	JobStatusRunning    JobStatus = "running"
	JobStatusSucceeded  JobStatus = "succeeded"
)

// Defines values for JobStatusEnum.
const (
	JobStatusEnumCancelled  JobStatusEnum = "cancelled"
	JobStatusEnumFailed     JobStatusEnum = "failed"
	JobStatusEnumIncomplete JobStatusEnum = "incomplete"
	JobStatusEnumPending    JobStatusEnum = "pending"
	JobStatusEnumRunning    JobStatusEnum = "running"
	JobStatusEnumSucceeded  JobStatusEnum = "succeeded"
)

// Defines values for JobTypeEnum.
const (
	JobTypeEnumClear   JobTypeEnum = "clear"
	JobTypeEnumRefresh JobTypeEnum = "refresh"
	JobTypeEnumReset   JobTypeEnum = "reset"
	JobTypeEnumSync    JobTypeEnum = "sync"
)

// Defines values for LogType.
const (
	Scheduler LogType = "scheduler"
	Server    LogType = "server"
)

// Defines values for NamespaceDefinitionType.
const (
	Customformat NamespaceDefinitionType = "customformat"
	Destination  NamespaceDefinitionType = "destination"
	Source       NamespaceDefinitionType = "source"
)

// Defines values for NonBreakingChangesPreference.
const (
	Disable          NonBreakingChangesPreference = "disable"
	Ignore           NonBreakingChangesPreference = "ignore"
	PropagateColumns NonBreakingChangesPreference = "propagate_columns"
)

// Defines values for NotificationReadStatus.
const (
	Failed    NotificationReadStatus = "failed"
	Succeeded NotificationReadStatus = "succeeded"
)

// Defines values for NotificationType.
const (
	Customerio NotificationType = "customerio"
	Slack      NotificationType = "slack"
)

// Defines values for OperatorNormalizationOption.
const (
	OperatorNormalizationOptionBasic OperatorNormalizationOption = "basic"
)

// Defines values for OperatorType.
const (
	Dbt           OperatorType = "dbt"
	Normalization OperatorType = "normalization"
)

// Defines values for StreamTransformTransformType.
const (
	AddStream    StreamTransformTransformType = "add_stream"
	RemoveStream StreamTransformTransformType = "remove_stream"
	UpdateStream StreamTransformTransformType = "update_stream"
)

// Defines values for SyncMode.
const (
	FullRefresh SyncMode = "full_refresh"
	Incremental SyncMode = "incremental"
)

// AirbyteArchive Tarball Archive (.tar.gz) of Airbyte Configuration and Database
type AirbyteArchive = openapi_types.File

// AirbyteCatalog describes the available schema (catalog).
type AirbyteCatalog struct {
	Streams []AirbyteStreamAndConfiguration `json:"streams"`
}

// AirbyteStream the immutable schema defined by the source
type AirbyteStream struct {
	// DefaultCursorField Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
	DefaultCursorField []string         `json:"defaultCursorField"`
	JsonSchema         StreamJsonSchema `json:"jsonSchema"`

	// Name Stream's name.
	Name string `json:"name"`

	// Namespace Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
	Namespace *string `json:"namespace,omitempty"`

	// SourceDefinedCursor If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
	SourceDefinedCursor bool `json:"sourceDefinedCursor"`

	// SourceDefinedPrimaryKey If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
	SourceDefinedPrimaryKey [][]string `json:"sourceDefinedPrimaryKey"`
	SupportedSyncModes      []SyncMode `json:"supportedSyncModes"`
}

// AirbyteStreamAndConfiguration each stream is split in two parts; the immutable schema from source and mutable configuration for destination
type AirbyteStreamAndConfiguration struct {
	// Config the mutable part of the stream to configure the destination
	Config AirbyteStreamConfiguration `json:"config"`

	// Stream the immutable schema defined by the source
	Stream AirbyteStream `json:"stream"`
}

// AirbyteStreamConfiguration the mutable part of the stream to configure the destination
type AirbyteStreamConfiguration struct {
	// AliasName Alias name to the stream to be used in the destination
	AliasName *string `json:"aliasName,omitempty"`

	// CursorField Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
	CursorField         *[]string           `json:"cursorField,omitempty"`
	DestinationSyncMode DestinationSyncMode `json:"destinationSyncMode"`

	// PrimaryKey Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
	PrimaryKey *[][]string `json:"primaryKey,omitempty"`
	Selected   *bool       `json:"selected,omitempty"`
	SyncMode   SyncMode    `json:"syncMode"`
}

// AttemptInfoRead defines model for AttemptInfoRead.
type AttemptInfoRead struct {
	Attempt AttemptRead `json:"attempt"`
	Logs    LogRead     `json:"logs"`
}

// AttemptRead defines model for AttemptRead.
type AttemptRead struct {
	BytesSynced   *int64        `json:"bytesSynced,omitempty"`
	CreatedAt     int64         `json:"createdAt"`
	EndedAt       *int64        `json:"endedAt,omitempty"`
	Id            int64         `json:"id"`
	RecordsSynced *int64        `json:"recordsSynced,omitempty"`
	Status        AttemptStatus `json:"status"`
	UpdatedAt     int64         `json:"updatedAt"`
}

// AttemptStatus defines model for AttemptStatus.
type AttemptStatus string

// CatalogDiff Describes the difference between two Airbyte catalogs.
type CatalogDiff struct {
	// Transforms list of stream transformations. order does not matter.
	Transforms []StreamTransform `json:"transforms"`
}

// CheckConnectionRead defines model for CheckConnectionRead.
type CheckConnectionRead struct {
	JobInfo SynchronousJobRead        `json:"jobInfo"`
	Message *string                   `json:"message,omitempty"`
	Status  CheckConnectionReadStatus `json:"status"`
}

// CheckConnectionReadStatus defines model for CheckConnectionRead.Status.
type CheckConnectionReadStatus string

// CheckOperationRead defines model for CheckOperationRead.
type CheckOperationRead struct {
	Message *string                  `json:"message,omitempty"`
	Status  CheckOperationReadStatus `json:"status"`
}

// CheckOperationReadStatus defines model for CheckOperationRead.Status.
type CheckOperationReadStatus string

// ConnectionCreate defines model for ConnectionCreate.
type ConnectionCreate struct {
	DestinationId DestinationId `json:"destinationId"`

	// Name Optional name of the connection
	Name *string `json:"name,omitempty"`

	// NamespaceDefinition Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// NamespaceFormat Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// Schedule if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// ScheduleData schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`

	// ScheduleType determine how the schedule data should be interpreted
	ScheduleType *ConnectionScheduleType `json:"scheduleType,omitempty"`
	SourceId     SourceId                `json:"sourceId"`

	// Status Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// SyncCatalog describes the available schema (catalog).
	SyncCatalog *AirbyteCatalog `json:"syncCatalog,omitempty"`
}

// ConnectionId defines model for ConnectionId.
type ConnectionId = openapi_types.UUID

// ConnectionIdRequestBody defines model for ConnectionIdRequestBody.
type ConnectionIdRequestBody struct {
	ConnectionId ConnectionId `json:"connectionId"`
}

// ConnectionRead defines model for ConnectionRead.
type ConnectionRead struct {
	ConnectionId  ConnectionId     `json:"connectionId"`
	Destination   *DestinationRead `json:"destination,omitempty"`
	DestinationId DestinationId    `json:"destinationId"`
	Name          string           `json:"name"`

	// NamespaceDefinition Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// NamespaceFormat Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// Schedule if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// ScheduleData schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`

	// ScheduleType determine how the schedule data should be interpreted
	ScheduleType *ConnectionScheduleType `json:"scheduleType,omitempty"`
	Source       *SourceRead             `json:"source,omitempty"`
	SourceId     SourceId                `json:"sourceId"`

	// Status Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// SyncCatalog describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// ConnectionReadList defines model for ConnectionReadList.
type ConnectionReadList struct {
	Connections []ConnectionRead `json:"connections"`
}

// ConnectionSchedule if null, then no schedule is set.
type ConnectionSchedule struct {
	TimeUnit ConnectionScheduleTimeUnit `json:"timeUnit"`
	Units    int64                      `json:"units"`
}

// ConnectionScheduleTimeUnit defines model for ConnectionSchedule.TimeUnit.
type ConnectionScheduleTimeUnit string

// ConnectionScheduleData schedule for when the the connection should run, per the schedule type
type ConnectionScheduleData struct {
	BasicSchedule *struct {
		TimeUnit ConnectionScheduleDataBasicScheduleTimeUnit `json:"timeUnit"`
		Units    int64                                       `json:"units"`
	} `json:"basicSchedule,omitempty"`
	Cron *struct {
		CronExpression string `json:"cronExpression"`
		CronTimeZone   string `json:"cronTimeZone"`
	} `json:"cron,omitempty"`
}

// ConnectionScheduleDataBasicScheduleTimeUnit defines model for ConnectionScheduleData.BasicSchedule.TimeUnit.
type ConnectionScheduleDataBasicScheduleTimeUnit string

// ConnectionScheduleType determine how the schedule data should be interpreted
type ConnectionScheduleType string

// ConnectionState defines model for ConnectionState.
type ConnectionState struct {
	ConnectionId ConnectionId           `json:"connectionId"`
	State        *ConnectionStateObject `json:"state,omitempty"`
}

// ConnectionStateObject defines model for ConnectionStateObject.
type ConnectionStateObject = map[string]interface{}

// ConnectionStatus Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
type ConnectionStatus string

// ConnectionUpdate defines model for ConnectionUpdate.
type ConnectionUpdate struct {
	ConnectionId ConnectionId `json:"connectionId"`

	// NamespaceDefinition Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// NamespaceFormat Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// Schedule if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// Status Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// SyncCatalog describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// CustomerId defines model for CustomerId.
type CustomerId = openapi_types.UUID

// DestinationConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
type DestinationConfiguration = map[string]interface{}

// DestinationCoreConfig defines model for DestinationCoreConfig.
type DestinationCoreConfig struct {
	// ConnectionConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration DestinationConfiguration `json:"connectionConfiguration"`
	DestinationDefinitionId DestinationDefinitionId  `json:"destinationDefinitionId"`
	WorkspaceId             WorkspaceId              `json:"workspaceId"`
}

// DestinationCreate defines model for DestinationCreate.
type DestinationCreate struct {
	// ConnectionConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration DestinationConfiguration `json:"connectionConfiguration"`
	DestinationDefinitionId DestinationDefinitionId  `json:"destinationDefinitionId"`
	Name                    string                   `json:"name"`
	WorkspaceId             WorkspaceId              `json:"workspaceId"`
}

// DestinationDefinitionCreate defines model for DestinationDefinitionCreate.
type DestinationDefinitionCreate struct {
	DockerImageTag   string  `json:"dockerImageTag"`
	DockerRepository string  `json:"dockerRepository"`
	DocumentationUrl string  `json:"documentationUrl"`
	Icon             *string `json:"icon,omitempty"`
	Name             string  `json:"name"`
}

// DestinationDefinitionId defines model for DestinationDefinitionId.
type DestinationDefinitionId = openapi_types.UUID

// DestinationDefinitionIdRequestBody defines model for DestinationDefinitionIdRequestBody.
type DestinationDefinitionIdRequestBody struct {
	DestinationDefinitionId DestinationDefinitionId `json:"destinationDefinitionId"`
}

// DestinationDefinitionRead defines model for DestinationDefinitionRead.
type DestinationDefinitionRead struct {
	DestinationDefinitionId DestinationDefinitionId `json:"destinationDefinitionId"`
	DockerImageTag          string                  `json:"dockerImageTag"`
	DockerRepository        string                  `json:"dockerRepository"`
	DocumentationUrl        string                  `json:"documentationUrl"`
	Icon                    *string                 `json:"icon,omitempty"`
	Name                    string                  `json:"name"`
}

// DestinationDefinitionReadList defines model for DestinationDefinitionReadList.
type DestinationDefinitionReadList struct {
	DestinationDefinitions []DestinationDefinitionRead `json:"destinationDefinitions"`
}

// DestinationDefinitionSpecification The specification for what values are required to configure the destinationDefinition.
type DestinationDefinitionSpecification = interface{}

// DestinationDefinitionSpecificationRead defines model for DestinationDefinitionSpecificationRead.
type DestinationDefinitionSpecificationRead struct {
	// ConnectionSpecification The specification for what values are required to configure the destinationDefinition.
	ConnectionSpecification       *DestinationDefinitionSpecification `json:"connectionSpecification,omitempty"`
	DestinationDefinitionId       DestinationDefinitionId             `json:"destinationDefinitionId"`
	DocumentationUrl              *string                             `json:"documentationUrl,omitempty"`
	JobInfo                       SynchronousJobRead                  `json:"jobInfo"`
	SupportedDestinationSyncModes *[]DestinationSyncMode              `json:"supportedDestinationSyncModes,omitempty"`
	SupportsDbt                   *bool                               `json:"supportsDbt,omitempty"`
	SupportsNormalization         *bool                               `json:"supportsNormalization,omitempty"`
}

// DestinationDefinitionUpdate defines model for DestinationDefinitionUpdate.
type DestinationDefinitionUpdate struct {
	DestinationDefinitionId DestinationDefinitionId `json:"destinationDefinitionId"`
	DockerImageTag          string                  `json:"dockerImageTag"`
}

// DestinationId defines model for DestinationId.
type DestinationId = openapi_types.UUID

// DestinationIdRequestBody defines model for DestinationIdRequestBody.
type DestinationIdRequestBody struct {
	DestinationId DestinationId `json:"destinationId"`
}

// DestinationRead defines model for DestinationRead.
type DestinationRead struct {
	// ConnectionConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration DestinationConfiguration `json:"connectionConfiguration"`
	DestinationDefinitionId DestinationDefinitionId  `json:"destinationDefinitionId"`
	DestinationId           DestinationId            `json:"destinationId"`
	DestinationName         string                   `json:"destinationName"`
	Name                    string                   `json:"name"`
	WorkspaceId             WorkspaceId              `json:"workspaceId"`
}

// DestinationReadList defines model for DestinationReadList.
type DestinationReadList struct {
	Destinations []DestinationRead `json:"destinations"`
}

// DestinationRecreate defines model for DestinationRecreate.
type DestinationRecreate struct {
	// ConnectionConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration DestinationConfiguration `json:"connectionConfiguration"`
	DestinationDefinitionId DestinationDefinitionId  `json:"destinationDefinitionId"`
	DestinationId           DestinationId            `json:"destinationId"`
	Name                    string                   `json:"name"`
	WorkspaceId             WorkspaceId              `json:"workspaceId"`
}

// DestinationSyncMode defines model for DestinationSyncMode.
type DestinationSyncMode string

// DestinationUpdate defines model for DestinationUpdate.
type DestinationUpdate struct {
	// ConnectionConfiguration The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration DestinationConfiguration `json:"connectionConfiguration"`
	DestinationId           DestinationId            `json:"destinationId"`
	Name                    string                   `json:"name"`
}

// FieldAdd defines model for FieldAdd.
type FieldAdd struct {
	// Schema JSONSchema representation of the field
	Schema *FieldSchema `json:"schema,omitempty"`
}

// FieldName A field name is a list of strings that form the path to the field.
type FieldName = []string

// FieldRemove defines model for FieldRemove.
type FieldRemove struct {
	// Schema JSONSchema representation of the field
	Schema *FieldSchema `json:"schema,omitempty"`
}

// FieldSchema JSONSchema representation of the field
type FieldSchema = map[string]interface{}

// FieldSchemaUpdate defines model for FieldSchemaUpdate.
type FieldSchemaUpdate struct {
	// NewSchema JSONSchema representation of the field
	NewSchema FieldSchema `json:"newSchema"`

	// OldSchema JSONSchema representation of the field
	OldSchema FieldSchema `json:"oldSchema"`
}

// FieldTransform Describes the difference between two Streams.
type FieldTransform struct {
	AddField *FieldAdd `json:"addField,omitempty"`
	Breaking bool      `json:"breaking"`

	// FieldName A field name is a list of strings that form the path to the field.
	FieldName         FieldName                   `json:"fieldName"`
	RemoveField       *FieldRemove                `json:"removeField,omitempty"`
	TransformType     FieldTransformTransformType `json:"transformType"`
	UpdateFieldSchema *FieldSchemaUpdate          `json:"updateFieldSchema,omitempty"`
}

// FieldTransformTransformType defines model for FieldTransform.TransformType.
type FieldTransformTransformType string

// HealthCheckRead defines model for HealthCheckRead.
type HealthCheckRead struct {
	Db bool `json:"db"`
}

// ImportRead defines model for ImportRead.
type ImportRead struct {
	Reason *string          `json:"reason,omitempty"`
	Status ImportReadStatus `json:"status"`
}

// ImportReadStatus defines model for ImportRead.Status.
type ImportReadStatus string

// InvalidInputExceptionInfo defines model for InvalidInputExceptionInfo.
type InvalidInputExceptionInfo struct {
	ExceptionClassName *string                `json:"exceptionClassName,omitempty"`
	ExceptionStack     *[]string              `json:"exceptionStack,omitempty"`
	Message            string                 `json:"message"`
	ValidationErrors   []InvalidInputProperty `json:"validationErrors"`
}

// InvalidInputProperty defines model for InvalidInputProperty.
type InvalidInputProperty struct {
	InvalidValue *string `json:"invalidValue,omitempty"`
	Message      *string `json:"message,omitempty"`
	PropertyPath string  `json:"propertyPath"`
}

// JobConfigType defines model for JobConfigType.
type JobConfigType string

// JobCreateRequest Creates a new Job from the configuration provided in the request body.
type JobCreateRequest struct {
	ConnectionId openapi_types.UUID `json:"connectionId"`

	// JobType Enum that describes the different types of jobs that the platform runs.
	JobType JobTypeEnum `json:"jobType"`
}

// JobId defines model for JobId.
type JobId = int64

// JobIdRequestBody defines model for JobIdRequestBody.
type JobIdRequestBody struct {
	Id JobId `json:"id"`
}

// JobInfoRead defines model for JobInfoRead.
type JobInfoRead struct {
	Attempts []AttemptInfoRead `json:"attempts"`
	Job      JobRead           `json:"job"`
}

// JobListRequestBody defines model for JobListRequestBody.
type JobListRequestBody struct {
	ConfigId       string          `json:"configId"`
	ConfigTypes    []JobConfigType `json:"configTypes"`
	IncludingJobId *JobId          `json:"includingJobId,omitempty"`
	Pagination     *Pagination     `json:"pagination,omitempty"`
}

// JobRead defines model for JobRead.
type JobRead struct {
	AggregatedStats *struct {
		BytesCommitted   int64 `json:"bytesCommitted"`
		BytesEmitted     int64 `json:"bytesEmitted"`
		RecordsCommitted int64 `json:"recordsCommitted"`
		RecordsEmitted   int64 `json:"recordsEmitted"`
	} `json:"aggregatedStats,omitempty"`
	ConfigId   string        `json:"configId"`
	ConfigType JobConfigType `json:"configType"`
	CreatedAt  int64         `json:"createdAt"`
	Id         JobId         `json:"id"`
	Status     JobStatus     `json:"status"`
	UpdatedAt  int64         `json:"updatedAt"`
}

// JobReadList defines model for JobReadList.
type JobReadList struct {
	Jobs []JobWithAttemptsRead `json:"jobs"`

	// TotalJobCount the total count of jobs for the specified connection
	TotalJobCount *int64 `json:"totalJobCount,omitempty"`
}

// JobResponse Provides details of a single job.
type JobResponse struct {
	BytesSynced  *int64             `json:"bytesSynced,omitempty"`
	ConnectionId openapi_types.UUID `json:"connectionId"`

	// Duration Duration of a sync in ISO_8601 format
	Duration *string `json:"duration,omitempty"`
	JobId    int64   `json:"jobId"`

	// JobType Enum that describes the different types of jobs that the platform runs.
	JobType       JobTypeEnum   `json:"jobType"`
	LastUpdatedAt *string       `json:"lastUpdatedAt,omitempty"`
	RowsSynced    *int64        `json:"rowsSynced,omitempty"`
	StartTime     string        `json:"startTime"`
	Status        JobStatusEnum `json:"status"`
}

// JobStatus defines model for JobStatus.
type JobStatus string

// JobStatusEnum defines model for JobStatusEnum.
type JobStatusEnum string

// JobTypeEnum Enum that describes the different types of jobs that the platform runs.
type JobTypeEnum string

// JobWithAttemptsRead defines model for JobWithAttemptsRead.
type JobWithAttemptsRead struct {
	Attempts *[]AttemptRead `json:"attempts,omitempty"`
	Job      *JobRead       `json:"job,omitempty"`
}

// ListConnectionsForWorkspacesRequestBody defines model for ListConnectionsForWorkspacesRequestBody.
type ListConnectionsForWorkspacesRequestBody struct {
	IncludeDeleted *bool              `json:"includeDeleted,omitempty"`
	Pagination     *Pagination        `json:"pagination,omitempty"`
	UserId         openapi_types.UUID `json:"userId"`
	WorkspaceIds   []WorkspaceId      `json:"workspaceIds"`
}

// ListResourcesForWorkspacesRequestBody defines model for ListResourcesForWorkspacesRequestBody.
type ListResourcesForWorkspacesRequestBody struct {
	IncludeDeleted *bool      `json:"includeDeleted,omitempty"`
	NameContains   *string    `json:"nameContains,omitempty"`
	Pagination     Pagination `json:"pagination"`
}

// LogRead defines model for LogRead.
type LogRead struct {
	LogLines []string `json:"logLines"`
}

// LogType type/source of logs produced
type LogType string

// LogsRequestBody defines model for LogsRequestBody.
type LogsRequestBody struct {
	// LogType type/source of logs produced
	LogType LogType `json:"logType"`
}

// NamespaceDefinitionType Method used for computing final namespace in destination
type NamespaceDefinitionType string

// NonBreakingChangesPreference defines model for NonBreakingChangesPreference.
type NonBreakingChangesPreference string

// NotFoundKnownExceptionInfo defines model for NotFoundKnownExceptionInfo.
type NotFoundKnownExceptionInfo struct {
	ExceptionClassName          *string   `json:"exceptionClassName,omitempty"`
	ExceptionStack              *[]string `json:"exceptionStack,omitempty"`
	Id                          *string   `json:"id,omitempty"`
	Message                     string    `json:"message"`
	RootCauseExceptionClassName *string   `json:"rootCauseExceptionClassName,omitempty"`
	RootCauseExceptionStack     *[]string `json:"rootCauseExceptionStack,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	NotificationType   NotificationType                `json:"notificationType"`
	SlackConfiguration *SlackNotificationConfiguration `json:"slackConfiguration,omitempty"`
}

// NotificationRead defines model for NotificationRead.
type NotificationRead struct {
	Message *string                `json:"message,omitempty"`
	Status  NotificationReadStatus `json:"status"`
}

// NotificationReadStatus defines model for NotificationRead.Status.
type NotificationReadStatus string

// NotificationSettings defines model for NotificationSettings.
type NotificationSettings struct {
	SendOnSuccess NotificationSettingsSendOn `json:"sendOnSuccess"`
}

// NotificationSettingsSendOn defines model for NotificationSettingsSendOn.
type NotificationSettingsSendOn struct {
	NotificationType   *[]NotificationType             `json:"notificationType,omitempty"`
	SlackConfiguration *SlackNotificationConfiguration `json:"slackConfiguration,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType string

// OperationCreate defines model for OperationCreate.
type OperationCreate struct {
	Name                  string                `json:"name"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           WorkspaceId           `json:"workspaceId"`
}

// OperationId defines model for OperationId.
type OperationId = openapi_types.UUID

// OperationIdRequestBody defines model for OperationIdRequestBody.
type OperationIdRequestBody struct {
	OperationId OperationId `json:"OperationId"`
}

// OperationRead defines model for OperationRead.
type OperationRead struct {
	Name                  string                `json:"name"`
	OperationId           OperationId           `json:"operationId"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           WorkspaceId           `json:"workspaceId"`
}

// OperationReadList defines model for OperationReadList.
type OperationReadList struct {
	Operations []OperationRead `json:"operations"`
}

// OperationUpdate defines model for OperationUpdate.
type OperationUpdate struct {
	Name                  string                `json:"name"`
	OperationId           OperationId           `json:"operationId"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
}

// OperatorConfiguration defines model for OperatorConfiguration.
type OperatorConfiguration struct {
	Dbt           *OperatorDbt           `json:"dbt,omitempty"`
	Normalization *OperatorNormalization `json:"normalization,omitempty"`
	OperatorType  OperatorType           `json:"operatorType"`
}

// OperatorDbt defines model for OperatorDbt.
type OperatorDbt struct {
	DbtArguments  *string `json:"dbtArguments,omitempty"`
	DockerImage   *string `json:"dockerImage,omitempty"`
	GitRepoBranch *string `json:"gitRepoBranch,omitempty"`
	GitRepoUrl    string  `json:"gitRepoUrl"`
}

// OperatorNormalization defines model for OperatorNormalization.
type OperatorNormalization struct {
	Option *OperatorNormalizationOption `json:"option,omitempty"`
}

// OperatorNormalizationOption defines model for OperatorNormalization.Option.
type OperatorNormalizationOption string

// OperatorType defines model for OperatorType.
type OperatorType string

// Pagination defines model for Pagination.
type Pagination struct {
	PageSize  int `json:"pageSize"`
	RowOffset int `json:"rowOffset"`
}

// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
type ResourceRequirements struct {
	CpuLimit      *string `json:"cpu_limit,omitempty"`
	CpuRequest    *string `json:"cpu_request,omitempty"`
	MemoryLimit   *string `json:"memory_limit,omitempty"`
	MemoryRequest *string `json:"memory_request,omitempty"`
}

// SlackNotificationConfiguration defines model for SlackNotificationConfiguration.
type SlackNotificationConfiguration struct {
	Webhook string `json:"webhook"`
}

// SlugRequestBody defines model for SlugRequestBody.
type SlugRequestBody struct {
	Slug string `json:"slug"`
}

// SourceConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
type SourceConfiguration = map[string]interface{}

// SourceCoreConfig defines model for SourceCoreConfig.
type SourceCoreConfig struct {
	// ConnectionConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration SourceConfiguration `json:"connectionConfiguration"`
	SourceDefinitionId      SourceDefinitionId  `json:"sourceDefinitionId"`
	WorkspaceId             *WorkspaceId        `json:"workspaceId,omitempty"`
}

// SourceCreate defines model for SourceCreate.
type SourceCreate struct {
	// ConnectionConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration SourceConfiguration `json:"connectionConfiguration"`
	Name                    string              `json:"name"`
	SourceDefinitionId      SourceDefinitionId  `json:"sourceDefinitionId"`
	WorkspaceId             WorkspaceId         `json:"workspaceId"`
}

// SourceDefinitionCreate defines model for SourceDefinitionCreate.
type SourceDefinitionCreate struct {
	DockerImageTag   string  `json:"dockerImageTag"`
	DockerRepository string  `json:"dockerRepository"`
	DocumentationUrl string  `json:"documentationUrl"`
	Icon             *string `json:"icon,omitempty"`
	Name             string  `json:"name"`
}

// SourceDefinitionId defines model for SourceDefinitionId.
type SourceDefinitionId = openapi_types.UUID

// SourceDefinitionIdRequestBody defines model for SourceDefinitionIdRequestBody.
type SourceDefinitionIdRequestBody struct {
	SourceDefinitionId SourceDefinitionId `json:"sourceDefinitionId"`
}

// SourceDefinitionIdWithWorkspaceIdRequestBody defines model for SourceDefinitionIdWithWorkspaceIdRequestBody.
type SourceDefinitionIdWithWorkspaceIdRequestBody struct {
	SourceDefinitionId SourceDefinitionId `json:"sourceDefinitionId"`
	WorkspaceId        *WorkspaceId       `json:"workspaceId,omitempty"`
}

// SourceDefinitionRead defines model for SourceDefinitionRead.
type SourceDefinitionRead struct {
	Custom             *bool               `json:"custom,omitempty"`
	DockerImageTag     *string             `json:"dockerImageTag,omitempty"`
	DockerRepository   *string             `json:"dockerRepository,omitempty"`
	DocumentationUrl   *string             `json:"documentationUrl,omitempty"`
	Icon               *string             `json:"icon,omitempty"`
	Name               *string             `json:"name,omitempty"`
	ProtocolVersion    *string             `json:"protocolVersion,omitempty"`
	ReleaseStage       *string             `json:"releaseStage,omitempty"`
	SourceDefinitionId *SourceDefinitionId `json:"sourceDefinitionId,omitempty"`
	SourceType         *string             `json:"sourceType,omitempty"`
	SupportLevel       *string             `json:"supportLevel,omitempty"`
}

// SourceDefinitionReadList defines model for SourceDefinitionReadList.
type SourceDefinitionReadList struct {
	SourceDefinitions []SourceDefinitionRead `json:"sourceDefinitions"`
}

// SourceDefinitionSpecification The specification for what values are required to configure the sourceDefinition.
type SourceDefinitionSpecification = map[string]interface{}

// SourceDefinitionSpecificationRead defines model for SourceDefinitionSpecificationRead.
type SourceDefinitionSpecificationRead struct {
	// ConnectionSpecification The specification for what values are required to configure the sourceDefinition.
	ConnectionSpecification *SourceDefinitionSpecification `json:"connectionSpecification,omitempty"`
	DocumentationUrl        *string                        `json:"documentationUrl,omitempty"`
	JobInfo                 SynchronousJobRead             `json:"jobInfo"`
	SourceDefinitionId      SourceDefinitionId             `json:"sourceDefinitionId"`
}

// SourceDefinitionUpdate Update the SourceDefinition. Currently, the only allowed attribute to update is the default docker image version.
type SourceDefinitionUpdate struct {
	DockerImageTag     string             `json:"dockerImageTag"`
	SourceDefinitionId SourceDefinitionId `json:"sourceDefinitionId"`
}

// SourceDiscoverSchemaRead Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
type SourceDiscoverSchemaRead struct {
	BreakingChange *bool `json:"breakingChange,omitempty"`

	// Catalog describes the available schema (catalog).
	Catalog *AirbyteCatalog `json:"catalog,omitempty"`

	// CatalogDiff Describes the difference between two Airbyte catalogs.
	CatalogDiff *CatalogDiff `json:"catalogDiff,omitempty"`

	// ConnectionStatus Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	ConnectionStatus *ConnectionStatus  `json:"connectionStatus,omitempty"`
	JobInfo          SynchronousJobRead `json:"jobInfo"`
}

// SourceId defines model for SourceId.
type SourceId = openapi_types.UUID

// SourceIdRequestBody defines model for SourceIdRequestBody.
type SourceIdRequestBody struct {
	SourceId SourceId `json:"sourceId"`
}

// SourceRead defines model for SourceRead.
type SourceRead struct {
	// ConnectionConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration SourceConfiguration `json:"connectionConfiguration"`
	Name                    string              `json:"name"`
	SourceDefinitionId      SourceDefinitionId  `json:"sourceDefinitionId"`
	SourceId                SourceId            `json:"sourceId"`
	SourceName              string              `json:"sourceName"`
}

// SourceReadList defines model for SourceReadList.
type SourceReadList struct {
	Sources []SourceRead `json:"sources"`
}

// SourceRecreate defines model for SourceRecreate.
type SourceRecreate struct {
	// ConnectionConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration SourceConfiguration `json:"connectionConfiguration"`
	Name                    string              `json:"name"`
	SourceDefinitionId      SourceDefinitionId  `json:"sourceDefinitionId"`
	SourceId                SourceId            `json:"sourceId"`
	WorkspaceId             WorkspaceId         `json:"workspaceId"`
}

// SourceUpdate defines model for SourceUpdate.
type SourceUpdate struct {
	// ConnectionConfiguration The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration SourceConfiguration `json:"connectionConfiguration"`
	Name                    string              `json:"name"`
	SourceId                SourceId            `json:"sourceId"`
}

// StreamJsonSchema defines model for StreamJsonSchema.
type StreamJsonSchema = map[string]interface{}

// StreamTransform defines model for StreamTransform.
type StreamTransform struct {
	TransformType StreamTransformTransformType `json:"transformType"`

	// UpdateStream list of field transformations. order does not matter.
	UpdateStream *[]FieldTransform `json:"updateStream,omitempty"`
}

// StreamTransformTransformType defines model for StreamTransform.TransformType.
type StreamTransformTransformType string

// SyncMode defines model for SyncMode.
type SyncMode string

// SynchronousJobRead defines model for SynchronousJobRead.
type SynchronousJobRead struct {
	// ConfigId only present if a config id was provided.
	ConfigId   *string            `json:"configId,omitempty"`
	ConfigType JobConfigType      `json:"configType"`
	CreatedAt  int64              `json:"createdAt"`
	EndedAt    int64              `json:"endedAt"`
	Id         openapi_types.UUID `json:"id"`
	Logs       *LogRead           `json:"logs,omitempty"`
	Succeeded  bool               `json:"succeeded"`
}

// WebBackendConnectionCreate defines model for WebBackendConnectionCreate.
type WebBackendConnectionCreate struct {
	DestinationId DestinationId `json:"destinationId"`

	// Name Optional name of the connection
	Name *string `json:"name,omitempty"`

	// NamespaceDefinition Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// NamespaceFormat Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat              *string                      `json:"namespaceFormat,omitempty"`
	NonBreakingChangesPreference NonBreakingChangesPreference `json:"nonBreakingChangesPreference"`
	OperationIds                 *[]OperationId               `json:"operationIds,omitempty"`
	Operations                   *[]OperationCreate           `json:"operations,omitempty"`

	// Prefix Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// Schedule if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// ScheduleData schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`

	// ScheduleType determine how the schedule data should be interpreted
	ScheduleType ConnectionScheduleType `json:"scheduleType"`
	SourceId     SourceId               `json:"sourceId"`

	// Status Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// SyncCatalog describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// WebBackendConnectionRead defines model for WebBackendConnectionRead.
type WebBackendConnectionRead = ConnectionRead

// WebBackendConnectionReadList defines model for WebBackendConnectionReadList.
type WebBackendConnectionReadList struct {
	Connections []WebBackendConnectionRead `json:"connections"`
}

// WebBackendConnectionRequestBody defines model for WebBackendConnectionRequestBody.
type WebBackendConnectionRequestBody struct {
	ConnectionId         ConnectionId `json:"connectionId"`
	WithRefreshedCatalog *bool        `json:"withRefreshedCatalog,omitempty"`
}

// WebBackendConnectionUpdate defines model for WebBackendConnectionUpdate.
type WebBackendConnectionUpdate struct {
	ConnectionId ConnectionId `json:"connectionId"`

	// Name Optional name of the connection
	Name *string `json:"name,omitempty"`

	// NamespaceDefinition Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// NamespaceFormat Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat              *string                              `json:"namespaceFormat,omitempty"`
	NonBreakingChangesPreference NonBreakingChangesPreference         `json:"nonBreakingChangesPreference"`
	NotifySchemaChanges          *bool                                `json:"notifySchemaChanges,omitempty"`
	OperationIds                 *[]OperationId                       `json:"operationIds,omitempty"`
	Operations                   *[]WebBackendOperationCreateOrUpdate `json:"operations,omitempty"`

	// Prefix Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// ResourceRequirements optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// Schedule if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// ScheduleData schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`

	// ScheduleType determine how the schedule data should be interpreted
	ScheduleType ConnectionScheduleType `json:"scheduleType"`
	SkipReset    *bool                  `json:"skipReset,omitempty"`

	// Status Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// SyncCatalog describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// WebBackendOperationCreateOrUpdate defines model for WebBackendOperationCreateOrUpdate.
type WebBackendOperationCreateOrUpdate struct {
	Name                  string                `json:"name"`
	OperationId           *OperationId          `json:"operationId,omitempty"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           WorkspaceId           `json:"workspaceId"`
}

// WorkspaceCreate defines model for WorkspaceCreate.
type WorkspaceCreate struct {
	AnonymousDataCollection *bool                `json:"anonymousDataCollection,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	Name                    string               `json:"name"`
	News                    *bool                `json:"news,omitempty"`
	Notifications           *[]Notification      `json:"notifications,omitempty"`
	OrganizationId          openapi_types.UUID   `json:"organizationId"`
	SecurityUpdates         *bool                `json:"securityUpdates,omitempty"`
}

// WorkspaceId defines model for WorkspaceId.
type WorkspaceId = openapi_types.UUID

// WorkspaceIdRequestBody defines model for WorkspaceIdRequestBody.
type WorkspaceIdRequestBody struct {
	WorkspaceId WorkspaceId `json:"workspaceId"`
}

// WorkspaceRead defines model for WorkspaceRead.
type WorkspaceRead struct {
	AnonymousDataCollection *bool                `json:"anonymousDataCollection,omitempty"`
	CustomerId              CustomerId           `json:"customerId"`
	DisplaySetupWizard      *bool                `json:"displaySetupWizard,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	InitialSetupComplete    bool                 `json:"initialSetupComplete"`
	Name                    string               `json:"name"`
	News                    *bool                `json:"news,omitempty"`
	Notifications           *[]Notification      `json:"notifications,omitempty"`
	SecurityUpdates         *bool                `json:"securityUpdates,omitempty"`
	Slug                    string               `json:"slug"`
	WorkspaceId             WorkspaceId          `json:"workspaceId"`
}

// WorkspaceReadList defines model for WorkspaceReadList.
type WorkspaceReadList struct {
	Workspaces []WorkspaceRead `json:"workspaces"`
}

// WorkspaceUpdate defines model for WorkspaceUpdate.
type WorkspaceUpdate struct {
	AnonymousDataCollection bool                  `json:"anonymousDataCollection"`
	DisplaySetupWizard      *bool                 `json:"displaySetupWizard,omitempty"`
	Email                   *openapi_types.Email  `json:"email,omitempty"`
	InitialSetupComplete    bool                  `json:"initialSetupComplete"`
	News                    bool                  `json:"news"`
	NotificationSettings    *NotificationSettings `json:"notificationSettings,omitempty"`
	Notifications           *[]Notification       `json:"notifications,omitempty"`
	SecurityUpdates         bool                  `json:"securityUpdates"`
	WorkspaceId             WorkspaceId           `json:"workspaceId"`
}

// InvalidInputResponse defines model for InvalidInputResponse.
type InvalidInputResponse = InvalidInputExceptionInfo

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = NotFoundKnownExceptionInfo

// PublicCreateJobJSONRequestBody defines body for PublicCreateJob for application/json ContentType.
type PublicCreateJobJSONRequestBody = JobCreateRequest

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody = ConnectionCreate

// DeleteConnectionJSONRequestBody defines body for DeleteConnection for application/json ContentType.
type DeleteConnectionJSONRequestBody = ConnectionIdRequestBody

// GetConnectionJSONRequestBody defines body for GetConnection for application/json ContentType.
type GetConnectionJSONRequestBody = ConnectionIdRequestBody

// ListConnectionsForWorkspaceJSONRequestBody defines body for ListConnectionsForWorkspace for application/json ContentType.
type ListConnectionsForWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// ListConnectionsForWorkspacesPaginatedJSONRequestBody defines body for ListConnectionsForWorkspacesPaginated for application/json ContentType.
type ListConnectionsForWorkspacesPaginatedJSONRequestBody = ListConnectionsForWorkspacesRequestBody

// ResetConnectionJSONRequestBody defines body for ResetConnection for application/json ContentType.
type ResetConnectionJSONRequestBody = ConnectionIdRequestBody

// SyncConnectionJSONRequestBody defines body for SyncConnection for application/json ContentType.
type SyncConnectionJSONRequestBody = ConnectionIdRequestBody

// UpdateConnectionJSONRequestBody defines body for UpdateConnection for application/json ContentType.
type UpdateConnectionJSONRequestBody = ConnectionUpdate

// GetDestinationDefinitionSpecificationJSONRequestBody defines body for GetDestinationDefinitionSpecification for application/json ContentType.
type GetDestinationDefinitionSpecificationJSONRequestBody = DestinationDefinitionIdRequestBody

// CreateDestinationDefinitionJSONRequestBody defines body for CreateDestinationDefinition for application/json ContentType.
type CreateDestinationDefinitionJSONRequestBody = DestinationDefinitionCreate

// GetDestinationDefinitionJSONRequestBody defines body for GetDestinationDefinition for application/json ContentType.
type GetDestinationDefinitionJSONRequestBody = DestinationDefinitionIdRequestBody

// UpdateDestinationDefinitionJSONRequestBody defines body for UpdateDestinationDefinition for application/json ContentType.
type UpdateDestinationDefinitionJSONRequestBody = DestinationDefinitionUpdate

// CheckConnectionToDestinationJSONRequestBody defines body for CheckConnectionToDestination for application/json ContentType.
type CheckConnectionToDestinationJSONRequestBody = DestinationIdRequestBody

// CheckConnectionToDestinationForUpdateJSONRequestBody defines body for CheckConnectionToDestinationForUpdate for application/json ContentType.
type CheckConnectionToDestinationForUpdateJSONRequestBody = DestinationUpdate

// CreateDestinationJSONRequestBody defines body for CreateDestination for application/json ContentType.
type CreateDestinationJSONRequestBody = DestinationCreate

// DeleteDestinationJSONRequestBody defines body for DeleteDestination for application/json ContentType.
type DeleteDestinationJSONRequestBody = DestinationIdRequestBody

// GetDestinationJSONRequestBody defines body for GetDestination for application/json ContentType.
type GetDestinationJSONRequestBody = DestinationIdRequestBody

// ListDestinationsForWorkspaceJSONRequestBody defines body for ListDestinationsForWorkspace for application/json ContentType.
type ListDestinationsForWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// UpdateDestinationJSONRequestBody defines body for UpdateDestination for application/json ContentType.
type UpdateDestinationJSONRequestBody = DestinationUpdate

// CancelJobJSONRequestBody defines body for CancelJob for application/json ContentType.
type CancelJobJSONRequestBody = JobIdRequestBody

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = JobCreateRequest

// GetJobInfoJSONRequestBody defines body for GetJobInfo for application/json ContentType.
type GetJobInfoJSONRequestBody = JobIdRequestBody

// ListJobsForJSONRequestBody defines body for ListJobsFor for application/json ContentType.
type ListJobsForJSONRequestBody = JobListRequestBody

// GetLogsJSONRequestBody defines body for GetLogs for application/json ContentType.
type GetLogsJSONRequestBody = LogsRequestBody

// TryNotificationConfigJSONRequestBody defines body for TryNotificationConfig for application/json ContentType.
type TryNotificationConfigJSONRequestBody = Notification

// CheckOperationJSONRequestBody defines body for CheckOperation for application/json ContentType.
type CheckOperationJSONRequestBody = OperatorConfiguration

// CreateOperationJSONRequestBody defines body for CreateOperation for application/json ContentType.
type CreateOperationJSONRequestBody = OperationCreate

// DeleteOperationJSONRequestBody defines body for DeleteOperation for application/json ContentType.
type DeleteOperationJSONRequestBody = OperationIdRequestBody

// GetOperationJSONRequestBody defines body for GetOperation for application/json ContentType.
type GetOperationJSONRequestBody = OperationIdRequestBody

// ListOperationsForConnectionJSONRequestBody defines body for ListOperationsForConnection for application/json ContentType.
type ListOperationsForConnectionJSONRequestBody = ConnectionIdRequestBody

// UpdateOperationJSONRequestBody defines body for UpdateOperation for application/json ContentType.
type UpdateOperationJSONRequestBody = OperationUpdate

// ExecuteDestinationCheckConnectionJSONRequestBody defines body for ExecuteDestinationCheckConnection for application/json ContentType.
type ExecuteDestinationCheckConnectionJSONRequestBody = DestinationCoreConfig

// ExecuteSourceCheckConnectionJSONRequestBody defines body for ExecuteSourceCheckConnection for application/json ContentType.
type ExecuteSourceCheckConnectionJSONRequestBody = SourceCoreConfig

// ExecuteSourceDiscoverSchemaJSONRequestBody defines body for ExecuteSourceDiscoverSchema for application/json ContentType.
type ExecuteSourceDiscoverSchemaJSONRequestBody = SourceCoreConfig

// GetSourceDefinitionSpecificationJSONRequestBody defines body for GetSourceDefinitionSpecification for application/json ContentType.
type GetSourceDefinitionSpecificationJSONRequestBody = SourceDefinitionIdWithWorkspaceIdRequestBody

// CreateSourceDefinitionJSONRequestBody defines body for CreateSourceDefinition for application/json ContentType.
type CreateSourceDefinitionJSONRequestBody = SourceDefinitionCreate

// GetSourceDefinitionJSONRequestBody defines body for GetSourceDefinition for application/json ContentType.
type GetSourceDefinitionJSONRequestBody = SourceDefinitionIdRequestBody

// ListSourceDefinitionsForWorkspaceJSONRequestBody defines body for ListSourceDefinitionsForWorkspace for application/json ContentType.
type ListSourceDefinitionsForWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// UpdateSourceDefinitionJSONRequestBody defines body for UpdateSourceDefinition for application/json ContentType.
type UpdateSourceDefinitionJSONRequestBody = SourceDefinitionUpdate

// CheckConnectionToSourceJSONRequestBody defines body for CheckConnectionToSource for application/json ContentType.
type CheckConnectionToSourceJSONRequestBody = SourceIdRequestBody

// CheckConnectionToSourceForUpdateJSONRequestBody defines body for CheckConnectionToSourceForUpdate for application/json ContentType.
type CheckConnectionToSourceForUpdateJSONRequestBody = SourceUpdate

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody = SourceCreate

// DeleteSourceJSONRequestBody defines body for DeleteSource for application/json ContentType.
type DeleteSourceJSONRequestBody = SourceIdRequestBody

// DiscoverSchemaForSourceJSONRequestBody defines body for DiscoverSchemaForSource for application/json ContentType.
type DiscoverSchemaForSourceJSONRequestBody = SourceIdRequestBody

// GetSourceJSONRequestBody defines body for GetSource for application/json ContentType.
type GetSourceJSONRequestBody = SourceIdRequestBody

// ListSourcesForWorkspaceJSONRequestBody defines body for ListSourcesForWorkspace for application/json ContentType.
type ListSourcesForWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// UpdateSourceJSONRequestBody defines body for UpdateSource for application/json ContentType.
type UpdateSourceJSONRequestBody = SourceUpdate

// GetStateJSONRequestBody defines body for GetState for application/json ContentType.
type GetStateJSONRequestBody = ConnectionIdRequestBody

// WebBackendCreateConnectionJSONRequestBody defines body for WebBackendCreateConnection for application/json ContentType.
type WebBackendCreateConnectionJSONRequestBody = WebBackendConnectionCreate

// WebBackendGetConnectionJSONRequestBody defines body for WebBackendGetConnection for application/json ContentType.
type WebBackendGetConnectionJSONRequestBody = WebBackendConnectionRequestBody

// WebBackendListConnectionsForWorkspaceJSONRequestBody defines body for WebBackendListConnectionsForWorkspace for application/json ContentType.
type WebBackendListConnectionsForWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// WebBackendUpdateConnectionJSONRequestBody defines body for WebBackendUpdateConnection for application/json ContentType.
type WebBackendUpdateConnectionJSONRequestBody = WebBackendConnectionUpdate

// WebBackendRecreateDestinationJSONRequestBody defines body for WebBackendRecreateDestination for application/json ContentType.
type WebBackendRecreateDestinationJSONRequestBody = DestinationRecreate

// WebBackendRecreateSourceJSONRequestBody defines body for WebBackendRecreateSource for application/json ContentType.
type WebBackendRecreateSourceJSONRequestBody = SourceRecreate

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody = WorkspaceCreate

// DeleteWorkspaceJSONRequestBody defines body for DeleteWorkspace for application/json ContentType.
type DeleteWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// GetWorkspaceJSONRequestBody defines body for GetWorkspace for application/json ContentType.
type GetWorkspaceJSONRequestBody = WorkspaceIdRequestBody

// GetWorkspaceBySlugJSONRequestBody defines body for GetWorkspaceBySlug for application/json ContentType.
type GetWorkspaceBySlugJSONRequestBody = SlugRequestBody

// ListAllWorkspacesPaginatedJSONRequestBody defines body for ListAllWorkspacesPaginated for application/json ContentType.
type ListAllWorkspacesPaginatedJSONRequestBody = ListResourcesForWorkspacesRequestBody

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = WorkspaceUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PublicCreateJobWithBody request with any body
	PublicCreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicCreateJob(ctx context.Context, body PublicCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectionWithBody request with any body
	CreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnection(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnectionWithBody request with any body
	DeleteConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConnection(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionWithBody request with any body
	GetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConnection(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectionsForWorkspaceWithBody request with any body
	ListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListConnectionsForWorkspace(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectionsForWorkspacesPaginatedWithBody request with any body
	ListConnectionsForWorkspacesPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListConnectionsForWorkspacesPaginated(ctx context.Context, body ListConnectionsForWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetConnectionWithBody request with any body
	ResetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetConnection(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncConnectionWithBody request with any body
	SyncConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SyncConnection(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectionWithBody request with any body
	UpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnection(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportArchive request
	ExportArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportArchiveWithBody request with any body
	ImportArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationDefinitionSpecificationWithBody request with any body
	GetDestinationDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestinationDefinitionSpecification(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDestinationDefinitionWithBody request with any body
	CreateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDestinationDefinition(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationDefinitionWithBody request with any body
	GetDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestinationDefinition(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDestinationDefinitions request
	ListDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLatestDestinationDefinitions request
	ListLatestDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDestinationDefinitionWithBody request with any body
	UpdateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDestinationDefinition(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToDestinationWithBody request with any body
	CheckConnectionToDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToDestination(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToDestinationForUpdateWithBody request with any body
	CheckConnectionToDestinationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToDestinationForUpdate(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDestinationWithBody request with any body
	CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDestinationWithBody request with any body
	DeleteDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDestination(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationWithBody request with any body
	GetDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestination(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDestinationsForWorkspaceWithBody request with any body
	ListDestinationsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListDestinationsForWorkspace(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDestinationWithBody request with any body
	UpdateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDestination(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealthCheck request
	GetHealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelJobWithBody request with any body
	CancelJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelJob(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJobWithBody request with any body
	CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobInfoWithBody request with any body
	GetJobInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetJobInfo(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobsForWithBody request with any body
	ListJobsForWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListJobsFor(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogsWithBody request with any body
	GetLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLogs(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TryNotificationConfigWithBody request with any body
	TryNotificationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TryNotificationConfig(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenApiSpec request
	GetOpenApiSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckOperationWithBody request with any body
	CheckOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckOperation(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOperationWithBody request with any body
	CreateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOperation(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOperationWithBody request with any body
	DeleteOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOperation(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperationWithBody request with any body
	GetOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOperation(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOperationsForConnectionWithBody request with any body
	ListOperationsForConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListOperationsForConnection(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOperationWithBody request with any body
	UpdateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOperation(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteDestinationCheckConnectionWithBody request with any body
	ExecuteDestinationCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteDestinationCheckConnection(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteSourceCheckConnectionWithBody request with any body
	ExecuteSourceCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteSourceCheckConnection(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteSourceDiscoverSchemaWithBody request with any body
	ExecuteSourceDiscoverSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteSourceDiscoverSchema(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceDefinitionSpecificationWithBody request with any body
	GetSourceDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSourceDefinitionSpecification(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSourceDefinitionWithBody request with any body
	CreateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSourceDefinition(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceDefinitionWithBody request with any body
	GetSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSourceDefinition(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceDefinitions request
	ListSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceDefinitionsForWorkspaceWithBody request with any body
	ListSourceDefinitionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSourceDefinitionsForWorkspace(ctx context.Context, body ListSourceDefinitionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLatestSourceDefinitions request
	ListLatestSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSourceDefinitionWithBody request with any body
	UpdateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSourceDefinition(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToSourceWithBody request with any body
	CheckConnectionToSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToSource(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToSourceForUpdateWithBody request with any body
	CheckConnectionToSourceForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToSourceForUpdate(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSourceWithBody request with any body
	CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSourceWithBody request with any body
	DeleteSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSource(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiscoverSchemaForSourceWithBody request with any body
	DiscoverSchemaForSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DiscoverSchemaForSource(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceWithBody request with any body
	GetSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSource(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourcesForWorkspaceWithBody request with any body
	ListSourcesForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSourcesForWorkspace(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSourceWithBody request with any body
	UpdateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSource(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStateWithBody request with any body
	GetStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetState(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendCreateConnectionWithBody request with any body
	WebBackendCreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendCreateConnection(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendGetConnectionWithBody request with any body
	WebBackendGetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendGetConnection(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendListConnectionsForWorkspaceWithBody request with any body
	WebBackendListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendListConnectionsForWorkspace(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendUpdateConnectionWithBody request with any body
	WebBackendUpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendUpdateConnection(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendRecreateDestinationWithBody request with any body
	WebBackendRecreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendRecreateDestination(ctx context.Context, body WebBackendRecreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendRecreateSourceWithBody request with any body
	WebBackendRecreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendRecreateSource(ctx context.Context, body WebBackendRecreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspaceWithBody request with any body
	CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceWithBody request with any body
	DeleteWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteWorkspace(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceWithBody request with any body
	GetWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkspace(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceBySlugWithBody request with any body
	GetWorkspaceBySlugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkspaceBySlug(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllWorkspacesPaginatedWithBody request with any body
	ListAllWorkspacesPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListAllWorkspacesPaginated(ctx context.Context, body ListAllWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceWithBody request with any body
	UpdateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PublicCreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateJob(ctx context.Context, body PublicCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnection(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnection(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnection(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspace(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspacesPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspacesPaginatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspacesPaginated(ctx context.Context, body ListConnectionsForWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspacesPaginatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConnection(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncConnection(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnection(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportArchiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionSpecificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionSpecification(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionSpecificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationDefinition(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinition(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLatestDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLatestDestinationDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationDefinition(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestination(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationForUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationForUpdate(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationForUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestination(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestination(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationsForWorkspace(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestination(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelJob(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJob(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobInfo(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobsForWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsForRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobsFor(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsForRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogs(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TryNotificationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTryNotificationConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TryNotificationConfig(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTryNotificationConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenApiSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenApiSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckOperation(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOperation(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOperation(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperation(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOperationsForConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOperationsForConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOperationsForConnection(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOperationsForConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperation(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteDestinationCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteDestinationCheckConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteDestinationCheckConnection(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteDestinationCheckConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceCheckConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceCheckConnection(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceCheckConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceDiscoverSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceDiscoverSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceDiscoverSchema(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceDiscoverSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionSpecificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionSpecification(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionSpecificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceDefinition(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinition(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceDefinitionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceDefinitionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceDefinitionsForWorkspace(ctx context.Context, body ListSourceDefinitionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceDefinitionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLatestSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLatestSourceDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceDefinition(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSource(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceForUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceForUpdate(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceForUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSource(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiscoverSchemaForSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiscoverSchemaForSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiscoverSchemaForSource(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiscoverSchemaForSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSource(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourcesForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourcesForWorkspace(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSource(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetState(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendCreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendCreateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendCreateConnection(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendCreateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendGetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendGetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendGetConnection(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendGetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListConnectionsForWorkspace(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendUpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendUpdateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendUpdateConnection(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendUpdateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendRecreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendRecreateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendRecreateDestination(ctx context.Context, body WebBackendRecreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendRecreateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendRecreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendRecreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendRecreateSource(ctx context.Context, body WebBackendRecreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendRecreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceBySlugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceBySlugRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceBySlug(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceBySlugRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllWorkspacesPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllWorkspacesPaginatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllWorkspacesPaginated(ctx context.Context, body ListAllWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllWorkspacesPaginatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPublicCreateJobRequest calls the generic PublicCreateJob builder with application/json body
func NewPublicCreateJobRequest(server string, body PublicCreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicCreateJobRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicCreateJobRequestWithBody generates requests for PublicCreateJob with any type of body
func NewPublicCreateJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateConnectionRequest calls the generic CreateConnection builder with application/json body
func NewCreateConnectionRequest(server string, body CreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConnectionRequestWithBody generates requests for CreateConnection with any type of body
func NewCreateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectionRequest calls the generic DeleteConnection builder with application/json body
func NewDeleteConnectionRequest(server string, body DeleteConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteConnectionRequestWithBody generates requests for DeleteConnection with any type of body
func NewDeleteConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectionRequest calls the generic GetConnection builder with application/json body
func NewGetConnectionRequest(server string, body GetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConnectionRequestWithBody generates requests for GetConnection with any type of body
func NewGetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectionsForWorkspaceRequest calls the generic ListConnectionsForWorkspace builder with application/json body
func NewListConnectionsForWorkspaceRequest(server string, body ListConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListConnectionsForWorkspaceRequestWithBody generates requests for ListConnectionsForWorkspace with any type of body
func NewListConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectionsForWorkspacesPaginatedRequest calls the generic ListConnectionsForWorkspacesPaginated builder with application/json body
func NewListConnectionsForWorkspacesPaginatedRequest(server string, body ListConnectionsForWorkspacesPaginatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListConnectionsForWorkspacesPaginatedRequestWithBody(server, "application/json", bodyReader)
}

// NewListConnectionsForWorkspacesPaginatedRequestWithBody generates requests for ListConnectionsForWorkspacesPaginated with any type of body
func NewListConnectionsForWorkspacesPaginatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/list_paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetConnectionRequest calls the generic ResetConnection builder with application/json body
func NewResetConnectionRequest(server string, body ResetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewResetConnectionRequestWithBody generates requests for ResetConnection with any type of body
func NewResetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSyncConnectionRequest calls the generic SyncConnection builder with application/json body
func NewSyncConnectionRequest(server string, body SyncConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSyncConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewSyncConnectionRequestWithBody generates requests for SyncConnection with any type of body
func NewSyncConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateConnectionRequest calls the generic UpdateConnection builder with application/json body
func NewUpdateConnectionRequest(server string, body UpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConnectionRequestWithBody generates requests for UpdateConnection with any type of body
func NewUpdateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExportArchiveRequest generates requests for ExportArchive
func NewExportArchiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportArchiveRequestWithBody generates requests for ImportArchive with any type of body
func NewImportArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationDefinitionSpecificationRequest calls the generic GetDestinationDefinitionSpecification builder with application/json body
func NewGetDestinationDefinitionSpecificationRequest(server string, body GetDestinationDefinitionSpecificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationDefinitionSpecificationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationDefinitionSpecificationRequestWithBody generates requests for GetDestinationDefinitionSpecification with any type of body
func NewGetDestinationDefinitionSpecificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definition_specifications/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDestinationDefinitionRequest calls the generic CreateDestinationDefinition builder with application/json body
func NewCreateDestinationDefinitionRequest(server string, body CreateDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDestinationDefinitionRequestWithBody generates requests for CreateDestinationDefinition with any type of body
func NewCreateDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationDefinitionRequest calls the generic GetDestinationDefinition builder with application/json body
func NewGetDestinationDefinitionRequest(server string, body GetDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationDefinitionRequestWithBody generates requests for GetDestinationDefinition with any type of body
func NewGetDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDestinationDefinitionsRequest generates requests for ListDestinationDefinitions
func NewListDestinationDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLatestDestinationDefinitionsRequest generates requests for ListLatestDestinationDefinitions
func NewListLatestDestinationDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/list_latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDestinationDefinitionRequest calls the generic UpdateDestinationDefinition builder with application/json body
func NewUpdateDestinationDefinitionRequest(server string, body UpdateDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDestinationDefinitionRequestWithBody generates requests for UpdateDestinationDefinition with any type of body
func NewUpdateDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToDestinationRequest calls the generic CheckConnectionToDestination builder with application/json body
func NewCheckConnectionToDestinationRequest(server string, body CheckConnectionToDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToDestinationRequestWithBody generates requests for CheckConnectionToDestination with any type of body
func NewCheckConnectionToDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToDestinationForUpdateRequest calls the generic CheckConnectionToDestinationForUpdate builder with application/json body
func NewCheckConnectionToDestinationForUpdateRequest(server string, body CheckConnectionToDestinationForUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToDestinationForUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToDestinationForUpdateRequestWithBody generates requests for CheckConnectionToDestinationForUpdate with any type of body
func NewCheckConnectionToDestinationForUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/check_connection_for_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDestinationRequest calls the generic CreateDestination builder with application/json body
func NewCreateDestinationRequest(server string, body CreateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDestinationRequestWithBody generates requests for CreateDestination with any type of body
func NewCreateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDestinationRequest calls the generic DeleteDestination builder with application/json body
func NewDeleteDestinationRequest(server string, body DeleteDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDestinationRequestWithBody generates requests for DeleteDestination with any type of body
func NewDeleteDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationRequest calls the generic GetDestination builder with application/json body
func NewGetDestinationRequest(server string, body GetDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationRequestWithBody generates requests for GetDestination with any type of body
func NewGetDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDestinationsForWorkspaceRequest calls the generic ListDestinationsForWorkspace builder with application/json body
func NewListDestinationsForWorkspaceRequest(server string, body ListDestinationsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListDestinationsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListDestinationsForWorkspaceRequestWithBody generates requests for ListDestinationsForWorkspace with any type of body
func NewListDestinationsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDestinationRequest calls the generic UpdateDestination builder with application/json body
func NewUpdateDestinationRequest(server string, body UpdateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDestinationRequestWithBody generates requests for UpdateDestination with any type of body
func NewUpdateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthCheckRequest generates requests for GetHealthCheck
func NewGetHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelJobRequest calls the generic CancelJob builder with application/json body
func NewCancelJobRequest(server string, body CancelJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCancelJobRequestWithBody generates requests for CancelJob with any type of body
func NewCancelJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateJobRequest calls the generic CreateJob builder with application/json body
func NewCreateJobRequest(server string, body CreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJobRequestWithBody generates requests for CreateJob with any type of body
func NewCreateJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobInfoRequest calls the generic GetJobInfo builder with application/json body
func NewGetJobInfoRequest(server string, body GetJobInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetJobInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetJobInfoRequestWithBody generates requests for GetJobInfo with any type of body
func NewGetJobInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListJobsForRequest calls the generic ListJobsFor builder with application/json body
func NewListJobsForRequest(server string, body ListJobsForJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListJobsForRequestWithBody(server, "application/json", bodyReader)
}

// NewListJobsForRequestWithBody generates requests for ListJobsFor with any type of body
func NewListJobsForRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogsRequest calls the generic GetLogs builder with application/json body
func NewGetLogsRequest(server string, body GetLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLogsRequestWithBody generates requests for GetLogs with any type of body
func NewGetLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/logs/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTryNotificationConfigRequest calls the generic TryNotificationConfig builder with application/json body
func NewTryNotificationConfigRequest(server string, body TryNotificationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTryNotificationConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewTryNotificationConfigRequestWithBody generates requests for TryNotificationConfig with any type of body
func NewTryNotificationConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/try")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenApiSpecRequest generates requests for GetOpenApiSpec
func NewGetOpenApiSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckOperationRequest calls the generic CheckOperation builder with application/json body
func NewCheckOperationRequest(server string, body CheckOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckOperationRequestWithBody generates requests for CheckOperation with any type of body
func NewCheckOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOperationRequest calls the generic CreateOperation builder with application/json body
func NewCreateOperationRequest(server string, body CreateOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOperationRequestWithBody generates requests for CreateOperation with any type of body
func NewCreateOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOperationRequest calls the generic DeleteOperation builder with application/json body
func NewDeleteOperationRequest(server string, body DeleteOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteOperationRequestWithBody generates requests for DeleteOperation with any type of body
func NewDeleteOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOperationRequest calls the generic GetOperation builder with application/json body
func NewGetOperationRequest(server string, body GetOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetOperationRequestWithBody generates requests for GetOperation with any type of body
func NewGetOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOperationsForConnectionRequest calls the generic ListOperationsForConnection builder with application/json body
func NewListOperationsForConnectionRequest(server string, body ListOperationsForConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListOperationsForConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewListOperationsForConnectionRequestWithBody generates requests for ListOperationsForConnection with any type of body
func NewListOperationsForConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOperationRequest calls the generic UpdateOperation builder with application/json body
func NewUpdateOperationRequest(server string, body UpdateOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateOperationRequestWithBody generates requests for UpdateOperation with any type of body
func NewUpdateOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteDestinationCheckConnectionRequest calls the generic ExecuteDestinationCheckConnection builder with application/json body
func NewExecuteDestinationCheckConnectionRequest(server string, body ExecuteDestinationCheckConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteDestinationCheckConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteDestinationCheckConnectionRequestWithBody generates requests for ExecuteDestinationCheckConnection with any type of body
func NewExecuteDestinationCheckConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/destinations/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteSourceCheckConnectionRequest calls the generic ExecuteSourceCheckConnection builder with application/json body
func NewExecuteSourceCheckConnectionRequest(server string, body ExecuteSourceCheckConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteSourceCheckConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteSourceCheckConnectionRequestWithBody generates requests for ExecuteSourceCheckConnection with any type of body
func NewExecuteSourceCheckConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/sources/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteSourceDiscoverSchemaRequest calls the generic ExecuteSourceDiscoverSchema builder with application/json body
func NewExecuteSourceDiscoverSchemaRequest(server string, body ExecuteSourceDiscoverSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteSourceDiscoverSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteSourceDiscoverSchemaRequestWithBody generates requests for ExecuteSourceDiscoverSchema with any type of body
func NewExecuteSourceDiscoverSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/sources/discover_schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceDefinitionSpecificationRequest calls the generic GetSourceDefinitionSpecification builder with application/json body
func NewGetSourceDefinitionSpecificationRequest(server string, body GetSourceDefinitionSpecificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceDefinitionSpecificationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceDefinitionSpecificationRequestWithBody generates requests for GetSourceDefinitionSpecification with any type of body
func NewGetSourceDefinitionSpecificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definition_specifications/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSourceDefinitionRequest calls the generic CreateSourceDefinition builder with application/json body
func NewCreateSourceDefinitionRequest(server string, body CreateSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourceDefinitionRequestWithBody generates requests for CreateSourceDefinition with any type of body
func NewCreateSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceDefinitionRequest calls the generic GetSourceDefinition builder with application/json body
func NewGetSourceDefinitionRequest(server string, body GetSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceDefinitionRequestWithBody generates requests for GetSourceDefinition with any type of body
func NewGetSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSourceDefinitionsRequest generates requests for ListSourceDefinitions
func NewListSourceDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourceDefinitionsForWorkspaceRequest calls the generic ListSourceDefinitionsForWorkspace builder with application/json body
func NewListSourceDefinitionsForWorkspaceRequest(server string, body ListSourceDefinitionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSourceDefinitionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListSourceDefinitionsForWorkspaceRequestWithBody generates requests for ListSourceDefinitionsForWorkspace with any type of body
func NewListSourceDefinitionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/list_for_workspace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListLatestSourceDefinitionsRequest generates requests for ListLatestSourceDefinitions
func NewListLatestSourceDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/list_latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSourceDefinitionRequest calls the generic UpdateSourceDefinition builder with application/json body
func NewUpdateSourceDefinitionRequest(server string, body UpdateSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSourceDefinitionRequestWithBody generates requests for UpdateSourceDefinition with any type of body
func NewUpdateSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToSourceRequest calls the generic CheckConnectionToSource builder with application/json body
func NewCheckConnectionToSourceRequest(server string, body CheckConnectionToSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToSourceRequestWithBody generates requests for CheckConnectionToSource with any type of body
func NewCheckConnectionToSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToSourceForUpdateRequest calls the generic CheckConnectionToSourceForUpdate builder with application/json body
func NewCheckConnectionToSourceForUpdateRequest(server string, body CheckConnectionToSourceForUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToSourceForUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToSourceForUpdateRequestWithBody generates requests for CheckConnectionToSourceForUpdate with any type of body
func NewCheckConnectionToSourceForUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/check_connection_for_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSourceRequest calls the generic CreateSource builder with application/json body
func NewCreateSourceRequest(server string, body CreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourceRequestWithBody generates requests for CreateSource with any type of body
func NewCreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSourceRequest calls the generic DeleteSource builder with application/json body
func NewDeleteSourceRequest(server string, body DeleteSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSourceRequestWithBody generates requests for DeleteSource with any type of body
func NewDeleteSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDiscoverSchemaForSourceRequest calls the generic DiscoverSchemaForSource builder with application/json body
func NewDiscoverSchemaForSourceRequest(server string, body DiscoverSchemaForSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDiscoverSchemaForSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDiscoverSchemaForSourceRequestWithBody generates requests for DiscoverSchemaForSource with any type of body
func NewDiscoverSchemaForSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/discover_schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceRequest calls the generic GetSource builder with application/json body
func NewGetSourceRequest(server string, body GetSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceRequestWithBody generates requests for GetSource with any type of body
func NewGetSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSourcesForWorkspaceRequest calls the generic ListSourcesForWorkspace builder with application/json body
func NewListSourcesForWorkspaceRequest(server string, body ListSourcesForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSourcesForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListSourcesForWorkspaceRequestWithBody generates requests for ListSourcesForWorkspace with any type of body
func NewListSourcesForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSourceRequest calls the generic UpdateSource builder with application/json body
func NewUpdateSourceRequest(server string, body UpdateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSourceRequestWithBody generates requests for UpdateSource with any type of body
func NewUpdateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStateRequest calls the generic GetState builder with application/json body
func NewGetStateRequest(server string, body GetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStateRequestWithBody(server, "application/json", bodyReader)
}

// NewGetStateRequestWithBody generates requests for GetState with any type of body
func NewGetStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/state/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendCreateConnectionRequest calls the generic WebBackendCreateConnection builder with application/json body
func NewWebBackendCreateConnectionRequest(server string, body WebBackendCreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendCreateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendCreateConnectionRequestWithBody generates requests for WebBackendCreateConnection with any type of body
func NewWebBackendCreateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendGetConnectionRequest calls the generic WebBackendGetConnection builder with application/json body
func NewWebBackendGetConnectionRequest(server string, body WebBackendGetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendGetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendGetConnectionRequestWithBody generates requests for WebBackendGetConnection with any type of body
func NewWebBackendGetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendListConnectionsForWorkspaceRequest calls the generic WebBackendListConnectionsForWorkspace builder with application/json body
func NewWebBackendListConnectionsForWorkspaceRequest(server string, body WebBackendListConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendListConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendListConnectionsForWorkspaceRequestWithBody generates requests for WebBackendListConnectionsForWorkspace with any type of body
func NewWebBackendListConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendUpdateConnectionRequest calls the generic WebBackendUpdateConnection builder with application/json body
func NewWebBackendUpdateConnectionRequest(server string, body WebBackendUpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendUpdateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendUpdateConnectionRequestWithBody generates requests for WebBackendUpdateConnection with any type of body
func NewWebBackendUpdateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendRecreateDestinationRequest calls the generic WebBackendRecreateDestination builder with application/json body
func NewWebBackendRecreateDestinationRequest(server string, body WebBackendRecreateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendRecreateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendRecreateDestinationRequestWithBody generates requests for WebBackendRecreateDestination with any type of body
func NewWebBackendRecreateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/destinations/recreate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendRecreateSourceRequest calls the generic WebBackendRecreateSource builder with application/json body
func NewWebBackendRecreateSourceRequest(server string, body WebBackendRecreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendRecreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendRecreateSourceRequestWithBody generates requests for WebBackendRecreateSource with any type of body
func NewWebBackendRecreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/sources/recreate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest calls the generic DeleteWorkspace builder with application/json body
func NewDeleteWorkspaceRequest(server string, body DeleteWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteWorkspaceRequestWithBody generates requests for DeleteWorkspace with any type of body
func NewDeleteWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspaceRequest calls the generic GetWorkspace builder with application/json body
func NewGetWorkspaceRequest(server string, body GetWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWorkspaceRequestWithBody generates requests for GetWorkspace with any type of body
func NewGetWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspaceBySlugRequest calls the generic GetWorkspaceBySlug builder with application/json body
func NewGetWorkspaceBySlugRequest(server string, body GetWorkspaceBySlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkspaceBySlugRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWorkspaceBySlugRequestWithBody generates requests for GetWorkspaceBySlug with any type of body
func NewGetWorkspaceBySlugRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/get_by_slug")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllWorkspacesPaginatedRequest calls the generic ListAllWorkspacesPaginated builder with application/json body
func NewListAllWorkspacesPaginatedRequest(server string, body ListAllWorkspacesPaginatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListAllWorkspacesPaginatedRequestWithBody(server, "application/json", bodyReader)
}

// NewListAllWorkspacesPaginatedRequestWithBody generates requests for ListAllWorkspacesPaginated with any type of body
func NewListAllWorkspacesPaginatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/list_all_paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PublicCreateJobWithBodyWithResponse request with any body
	PublicCreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateJobResponse, error)

	PublicCreateJobWithResponse(ctx context.Context, body PublicCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateJobResponse, error)

	// CreateConnectionWithBodyWithResponse request with any body
	CreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	CreateConnectionWithResponse(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	// DeleteConnectionWithBodyWithResponse request with any body
	DeleteConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	DeleteConnectionWithResponse(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	// GetConnectionWithBodyWithResponse request with any body
	GetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	GetConnectionWithResponse(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	// ListConnectionsForWorkspaceWithBodyWithResponse request with any body
	ListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error)

	ListConnectionsForWorkspaceWithResponse(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error)

	// ListConnectionsForWorkspacesPaginatedWithBodyWithResponse request with any body
	ListConnectionsForWorkspacesPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspacesPaginatedResponse, error)

	ListConnectionsForWorkspacesPaginatedWithResponse(ctx context.Context, body ListConnectionsForWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspacesPaginatedResponse, error)

	// ResetConnectionWithBodyWithResponse request with any body
	ResetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error)

	ResetConnectionWithResponse(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error)

	// SyncConnectionWithBodyWithResponse request with any body
	SyncConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error)

	SyncConnectionWithResponse(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error)

	// UpdateConnectionWithBodyWithResponse request with any body
	UpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	UpdateConnectionWithResponse(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	// ExportArchiveWithResponse request
	ExportArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportArchiveResponse, error)

	// ImportArchiveWithBodyWithResponse request with any body
	ImportArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportArchiveResponse, error)

	// GetDestinationDefinitionSpecificationWithBodyWithResponse request with any body
	GetDestinationDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error)

	GetDestinationDefinitionSpecificationWithResponse(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error)

	// CreateDestinationDefinitionWithBodyWithResponse request with any body
	CreateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error)

	CreateDestinationDefinitionWithResponse(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error)

	// GetDestinationDefinitionWithBodyWithResponse request with any body
	GetDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error)

	GetDestinationDefinitionWithResponse(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error)

	// ListDestinationDefinitionsWithResponse request
	ListDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDestinationDefinitionsResponse, error)

	// ListLatestDestinationDefinitionsWithResponse request
	ListLatestDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestDestinationDefinitionsResponse, error)

	// UpdateDestinationDefinitionWithBodyWithResponse request with any body
	UpdateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error)

	UpdateDestinationDefinitionWithResponse(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error)

	// CheckConnectionToDestinationWithBodyWithResponse request with any body
	CheckConnectionToDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error)

	CheckConnectionToDestinationWithResponse(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error)

	// CheckConnectionToDestinationForUpdateWithBodyWithResponse request with any body
	CheckConnectionToDestinationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error)

	CheckConnectionToDestinationForUpdateWithResponse(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error)

	// CreateDestinationWithBodyWithResponse request with any body
	CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error)

	CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error)

	// DeleteDestinationWithBodyWithResponse request with any body
	DeleteDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error)

	DeleteDestinationWithResponse(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error)

	// GetDestinationWithBodyWithResponse request with any body
	GetDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error)

	GetDestinationWithResponse(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error)

	// ListDestinationsForWorkspaceWithBodyWithResponse request with any body
	ListDestinationsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error)

	ListDestinationsForWorkspaceWithResponse(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error)

	// UpdateDestinationWithBodyWithResponse request with any body
	UpdateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error)

	UpdateDestinationWithResponse(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error)

	// GetHealthCheckWithResponse request
	GetHealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthCheckResponse, error)

	// CancelJobWithBodyWithResponse request with any body
	CancelJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelJobResponse, error)

	CancelJobWithResponse(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelJobResponse, error)

	// CreateJobWithBodyWithResponse request with any body
	CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	// GetJobInfoWithBodyWithResponse request with any body
	GetJobInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error)

	GetJobInfoWithResponse(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error)

	// ListJobsForWithBodyWithResponse request with any body
	ListJobsForWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error)

	ListJobsForWithResponse(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error)

	// GetLogsWithBodyWithResponse request with any body
	GetLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogsResponse, error)

	GetLogsWithResponse(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogsResponse, error)

	// TryNotificationConfigWithBodyWithResponse request with any body
	TryNotificationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error)

	TryNotificationConfigWithResponse(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error)

	// GetOpenApiSpecWithResponse request
	GetOpenApiSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecResponse, error)

	// CheckOperationWithBodyWithResponse request with any body
	CheckOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error)

	CheckOperationWithResponse(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error)

	// CreateOperationWithBodyWithResponse request with any body
	CreateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error)

	CreateOperationWithResponse(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error)

	// DeleteOperationWithBodyWithResponse request with any body
	DeleteOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error)

	DeleteOperationWithResponse(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error)

	// GetOperationWithBodyWithResponse request with any body
	GetOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOperationResponse, error)

	GetOperationWithResponse(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOperationResponse, error)

	// ListOperationsForConnectionWithBodyWithResponse request with any body
	ListOperationsForConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error)

	ListOperationsForConnectionWithResponse(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error)

	// UpdateOperationWithBodyWithResponse request with any body
	UpdateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error)

	UpdateOperationWithResponse(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error)

	// ExecuteDestinationCheckConnectionWithBodyWithResponse request with any body
	ExecuteDestinationCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error)

	ExecuteDestinationCheckConnectionWithResponse(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error)

	// ExecuteSourceCheckConnectionWithBodyWithResponse request with any body
	ExecuteSourceCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error)

	ExecuteSourceCheckConnectionWithResponse(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error)

	// ExecuteSourceDiscoverSchemaWithBodyWithResponse request with any body
	ExecuteSourceDiscoverSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error)

	ExecuteSourceDiscoverSchemaWithResponse(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error)

	// GetSourceDefinitionSpecificationWithBodyWithResponse request with any body
	GetSourceDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error)

	GetSourceDefinitionSpecificationWithResponse(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error)

	// CreateSourceDefinitionWithBodyWithResponse request with any body
	CreateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error)

	CreateSourceDefinitionWithResponse(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error)

	// GetSourceDefinitionWithBodyWithResponse request with any body
	GetSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error)

	GetSourceDefinitionWithResponse(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error)

	// ListSourceDefinitionsWithResponse request
	ListSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsResponse, error)

	// ListSourceDefinitionsForWorkspaceWithBodyWithResponse request with any body
	ListSourceDefinitionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsForWorkspaceResponse, error)

	ListSourceDefinitionsForWorkspaceWithResponse(ctx context.Context, body ListSourceDefinitionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsForWorkspaceResponse, error)

	// ListLatestSourceDefinitionsWithResponse request
	ListLatestSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestSourceDefinitionsResponse, error)

	// UpdateSourceDefinitionWithBodyWithResponse request with any body
	UpdateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error)

	UpdateSourceDefinitionWithResponse(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error)

	// CheckConnectionToSourceWithBodyWithResponse request with any body
	CheckConnectionToSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error)

	CheckConnectionToSourceWithResponse(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error)

	// CheckConnectionToSourceForUpdateWithBodyWithResponse request with any body
	CheckConnectionToSourceForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error)

	CheckConnectionToSourceForUpdateWithResponse(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error)

	// CreateSourceWithBodyWithResponse request with any body
	CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error)

	CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error)

	// DeleteSourceWithBodyWithResponse request with any body
	DeleteSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error)

	DeleteSourceWithResponse(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error)

	// DiscoverSchemaForSourceWithBodyWithResponse request with any body
	DiscoverSchemaForSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error)

	DiscoverSchemaForSourceWithResponse(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error)

	// GetSourceWithBodyWithResponse request with any body
	GetSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceResponse, error)

	GetSourceWithResponse(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceResponse, error)

	// ListSourcesForWorkspaceWithBodyWithResponse request with any body
	ListSourcesForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error)

	ListSourcesForWorkspaceWithResponse(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error)

	// UpdateSourceWithBodyWithResponse request with any body
	UpdateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error)

	UpdateSourceWithResponse(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error)

	// GetStateWithBodyWithResponse request with any body
	GetStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStateResponse, error)

	GetStateWithResponse(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStateResponse, error)

	// WebBackendCreateConnectionWithBodyWithResponse request with any body
	WebBackendCreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error)

	WebBackendCreateConnectionWithResponse(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error)

	// WebBackendGetConnectionWithBodyWithResponse request with any body
	WebBackendGetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error)

	WebBackendGetConnectionWithResponse(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error)

	// WebBackendListConnectionsForWorkspaceWithBodyWithResponse request with any body
	WebBackendListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error)

	WebBackendListConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error)

	// WebBackendUpdateConnectionWithBodyWithResponse request with any body
	WebBackendUpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error)

	WebBackendUpdateConnectionWithResponse(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error)

	// WebBackendRecreateDestinationWithBodyWithResponse request with any body
	WebBackendRecreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendRecreateDestinationResponse, error)

	WebBackendRecreateDestinationWithResponse(ctx context.Context, body WebBackendRecreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendRecreateDestinationResponse, error)

	// WebBackendRecreateSourceWithBodyWithResponse request with any body
	WebBackendRecreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendRecreateSourceResponse, error)

	WebBackendRecreateSourceWithResponse(ctx context.Context, body WebBackendRecreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendRecreateSourceResponse, error)

	// CreateWorkspaceWithBodyWithResponse request with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	// DeleteWorkspaceWithBodyWithResponse request with any body
	DeleteWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	DeleteWorkspaceWithResponse(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspaceWithBodyWithResponse request with any body
	GetWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	GetWorkspaceWithResponse(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// GetWorkspaceBySlugWithBodyWithResponse request with any body
	GetWorkspaceBySlugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error)

	GetWorkspaceBySlugWithResponse(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error)

	// ListWorkspacesWithResponse request
	ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// ListAllWorkspacesPaginatedWithBodyWithResponse request with any body
	ListAllWorkspacesPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAllWorkspacesPaginatedResponse, error)

	ListAllWorkspacesPaginatedWithResponse(ctx context.Context, body ListAllWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*ListAllWorkspacesPaginatedResponse, error)

	// UpdateWorkspaceWithBodyWithResponse request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)
}

type PublicCreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobResponse
}

// Status returns HTTPResponse.Status
func (r PublicCreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectionsForWorkspacesPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListConnectionsForWorkspacesPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectionsForWorkspacesPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ResetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r SyncConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportRead
}

// Status returns HTTPResponse.Status
func (r ImportArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationDefinitionSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionSpecificationRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetDestinationDefinitionSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationDefinitionSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDestinationDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListDestinationDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDestinationDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLatestDestinationDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListLatestDestinationDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLatestDestinationDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToDestinationForUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToDestinationForUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToDestinationForUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDestinationsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListDestinationsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDestinationsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckRead
}

// Status returns HTTPResponse.Status
func (r GetHealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CancelJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetJobInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobsForResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListJobsForResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobsForResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TryNotificationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r TryNotificationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TryNotificationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenApiSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenApiSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenApiSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckOperationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CheckOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOperationsForConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListOperationsForConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOperationsForConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteDestinationCheckConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteDestinationCheckConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteDestinationCheckConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteSourceCheckConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteSourceCheckConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteSourceCheckConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteSourceDiscoverSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDiscoverSchemaRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteSourceDiscoverSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteSourceDiscoverSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceDefinitionSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionSpecificationRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetSourceDefinitionSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceDefinitionSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListSourceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceDefinitionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListSourceDefinitionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceDefinitionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLatestSourceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListLatestSourceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLatestSourceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToSourceForUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToSourceForUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToSourceForUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiscoverSchemaForSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDiscoverSchemaRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DiscoverSchemaForSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiscoverSchemaForSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourcesForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r ListSourcesForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourcesForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionState
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendCreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendCreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendCreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendGetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendGetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendGetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendListConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionReadList
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendListConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendListConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendUpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendUpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendUpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendRecreateDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendRecreateDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendRecreateDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendRecreateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r WebBackendRecreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendRecreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceBySlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceBySlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceBySlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceReadList
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllWorkspacesPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceReadList
}

// Status returns HTTPResponse.Status
func (r ListAllWorkspacesPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllWorkspacesPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundResponse
	JSON422      *InvalidInputResponse
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PublicCreateJobWithBodyWithResponse request with arbitrary body returning *PublicCreateJobResponse
func (c *ClientWithResponses) PublicCreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateJobResponse, error) {
	rsp, err := c.PublicCreateJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateJobResponse(rsp)
}

func (c *ClientWithResponses) PublicCreateJobWithResponse(ctx context.Context, body PublicCreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateJobResponse, error) {
	rsp, err := c.PublicCreateJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateJobResponse(rsp)
}

// CreateConnectionWithBodyWithResponse request with arbitrary body returning *CreateConnectionResponse
func (c *ClientWithResponses) CreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectionWithResponse(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

// DeleteConnectionWithBodyWithResponse request with arbitrary body returning *DeleteConnectionResponse
func (c *ClientWithResponses) DeleteConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

func (c *ClientWithResponses) DeleteConnectionWithResponse(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

// GetConnectionWithBodyWithResponse request with arbitrary body returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// ListConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListConnectionsForWorkspaceResponse
func (c *ClientWithResponses) ListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListConnectionsForWorkspaceWithResponse(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspaceResponse(rsp)
}

// ListConnectionsForWorkspacesPaginatedWithBodyWithResponse request with arbitrary body returning *ListConnectionsForWorkspacesPaginatedResponse
func (c *ClientWithResponses) ListConnectionsForWorkspacesPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspacesPaginatedResponse, error) {
	rsp, err := c.ListConnectionsForWorkspacesPaginatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspacesPaginatedResponse(rsp)
}

func (c *ClientWithResponses) ListConnectionsForWorkspacesPaginatedWithResponse(ctx context.Context, body ListConnectionsForWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspacesPaginatedResponse, error) {
	rsp, err := c.ListConnectionsForWorkspacesPaginated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspacesPaginatedResponse(rsp)
}

// ResetConnectionWithBodyWithResponse request with arbitrary body returning *ResetConnectionResponse
func (c *ClientWithResponses) ResetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error) {
	rsp, err := c.ResetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConnectionResponse(rsp)
}

func (c *ClientWithResponses) ResetConnectionWithResponse(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error) {
	rsp, err := c.ResetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConnectionResponse(rsp)
}

// SyncConnectionWithBodyWithResponse request with arbitrary body returning *SyncConnectionResponse
func (c *ClientWithResponses) SyncConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error) {
	rsp, err := c.SyncConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncConnectionResponse(rsp)
}

func (c *ClientWithResponses) SyncConnectionWithResponse(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error) {
	rsp, err := c.SyncConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncConnectionResponse(rsp)
}

// UpdateConnectionWithBodyWithResponse request with arbitrary body returning *UpdateConnectionResponse
func (c *ClientWithResponses) UpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionWithResponse(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

// ExportArchiveWithResponse request returning *ExportArchiveResponse
func (c *ClientWithResponses) ExportArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportArchiveResponse, error) {
	rsp, err := c.ExportArchive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportArchiveResponse(rsp)
}

// ImportArchiveWithBodyWithResponse request with arbitrary body returning *ImportArchiveResponse
func (c *ClientWithResponses) ImportArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportArchiveResponse, error) {
	rsp, err := c.ImportArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportArchiveResponse(rsp)
}

// GetDestinationDefinitionSpecificationWithBodyWithResponse request with arbitrary body returning *GetDestinationDefinitionSpecificationResponse
func (c *ClientWithResponses) GetDestinationDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error) {
	rsp, err := c.GetDestinationDefinitionSpecificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionSpecificationResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationDefinitionSpecificationWithResponse(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error) {
	rsp, err := c.GetDestinationDefinitionSpecification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionSpecificationResponse(rsp)
}

// CreateDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *CreateDestinationDefinitionResponse
func (c *ClientWithResponses) CreateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error) {
	rsp, err := c.CreateDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateDestinationDefinitionWithResponse(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error) {
	rsp, err := c.CreateDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationDefinitionResponse(rsp)
}

// GetDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *GetDestinationDefinitionResponse
func (c *ClientWithResponses) GetDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error) {
	rsp, err := c.GetDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationDefinitionWithResponse(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error) {
	rsp, err := c.GetDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionResponse(rsp)
}

// ListDestinationDefinitionsWithResponse request returning *ListDestinationDefinitionsResponse
func (c *ClientWithResponses) ListDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDestinationDefinitionsResponse, error) {
	rsp, err := c.ListDestinationDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationDefinitionsResponse(rsp)
}

// ListLatestDestinationDefinitionsWithResponse request returning *ListLatestDestinationDefinitionsResponse
func (c *ClientWithResponses) ListLatestDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestDestinationDefinitionsResponse, error) {
	rsp, err := c.ListLatestDestinationDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLatestDestinationDefinitionsResponse(rsp)
}

// UpdateDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateDestinationDefinitionResponse
func (c *ClientWithResponses) UpdateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error) {
	rsp, err := c.UpdateDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateDestinationDefinitionWithResponse(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error) {
	rsp, err := c.UpdateDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationDefinitionResponse(rsp)
}

// CheckConnectionToDestinationWithBodyWithResponse request with arbitrary body returning *CheckConnectionToDestinationResponse
func (c *ClientWithResponses) CheckConnectionToDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error) {
	rsp, err := c.CheckConnectionToDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToDestinationWithResponse(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error) {
	rsp, err := c.CheckConnectionToDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationResponse(rsp)
}

// CheckConnectionToDestinationForUpdateWithBodyWithResponse request with arbitrary body returning *CheckConnectionToDestinationForUpdateResponse
func (c *ClientWithResponses) CheckConnectionToDestinationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToDestinationForUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationForUpdateResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToDestinationForUpdateWithResponse(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToDestinationForUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationForUpdateResponse(rsp)
}

// CreateDestinationWithBodyWithResponse request with arbitrary body returning *CreateDestinationResponse
func (c *ClientWithResponses) CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error) {
	rsp, err := c.CreateDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResponse(rsp)
}

func (c *ClientWithResponses) CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error) {
	rsp, err := c.CreateDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResponse(rsp)
}

// DeleteDestinationWithBodyWithResponse request with arbitrary body returning *DeleteDestinationResponse
func (c *ClientWithResponses) DeleteDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error) {
	rsp, err := c.DeleteDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationResponse(rsp)
}

func (c *ClientWithResponses) DeleteDestinationWithResponse(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error) {
	rsp, err := c.DeleteDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationResponse(rsp)
}

// GetDestinationWithBodyWithResponse request with arbitrary body returning *GetDestinationResponse
func (c *ClientWithResponses) GetDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error) {
	rsp, err := c.GetDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationWithResponse(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error) {
	rsp, err := c.GetDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationResponse(rsp)
}

// ListDestinationsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListDestinationsForWorkspaceResponse
func (c *ClientWithResponses) ListDestinationsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error) {
	rsp, err := c.ListDestinationsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListDestinationsForWorkspaceWithResponse(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error) {
	rsp, err := c.ListDestinationsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationsForWorkspaceResponse(rsp)
}

// UpdateDestinationWithBodyWithResponse request with arbitrary body returning *UpdateDestinationResponse
func (c *ClientWithResponses) UpdateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error) {
	rsp, err := c.UpdateDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationResponse(rsp)
}

func (c *ClientWithResponses) UpdateDestinationWithResponse(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error) {
	rsp, err := c.UpdateDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationResponse(rsp)
}

// GetHealthCheckWithResponse request returning *GetHealthCheckResponse
func (c *ClientWithResponses) GetHealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthCheckResponse, error) {
	rsp, err := c.GetHealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthCheckResponse(rsp)
}

// CancelJobWithBodyWithResponse request with arbitrary body returning *CancelJobResponse
func (c *ClientWithResponses) CancelJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelJobResponse, error) {
	rsp, err := c.CancelJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelJobResponse(rsp)
}

func (c *ClientWithResponses) CancelJobWithResponse(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelJobResponse, error) {
	rsp, err := c.CancelJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelJobResponse(rsp)
}

// CreateJobWithBodyWithResponse request with arbitrary body returning *CreateJobResponse
func (c *ClientWithResponses) CreateJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

func (c *ClientWithResponses) CreateJobWithResponse(ctx context.Context, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

// GetJobInfoWithBodyWithResponse request with arbitrary body returning *GetJobInfoResponse
func (c *ClientWithResponses) GetJobInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error) {
	rsp, err := c.GetJobInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobInfoResponse(rsp)
}

func (c *ClientWithResponses) GetJobInfoWithResponse(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error) {
	rsp, err := c.GetJobInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobInfoResponse(rsp)
}

// ListJobsForWithBodyWithResponse request with arbitrary body returning *ListJobsForResponse
func (c *ClientWithResponses) ListJobsForWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error) {
	rsp, err := c.ListJobsForWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsForResponse(rsp)
}

func (c *ClientWithResponses) ListJobsForWithResponse(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error) {
	rsp, err := c.ListJobsFor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsForResponse(rsp)
}

// GetLogsWithBodyWithResponse request with arbitrary body returning *GetLogsResponse
func (c *ClientWithResponses) GetLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogsResponse, error) {
	rsp, err := c.GetLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResponse(rsp)
}

func (c *ClientWithResponses) GetLogsWithResponse(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogsResponse, error) {
	rsp, err := c.GetLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResponse(rsp)
}

// TryNotificationConfigWithBodyWithResponse request with arbitrary body returning *TryNotificationConfigResponse
func (c *ClientWithResponses) TryNotificationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error) {
	rsp, err := c.TryNotificationConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTryNotificationConfigResponse(rsp)
}

func (c *ClientWithResponses) TryNotificationConfigWithResponse(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error) {
	rsp, err := c.TryNotificationConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTryNotificationConfigResponse(rsp)
}

// GetOpenApiSpecWithResponse request returning *GetOpenApiSpecResponse
func (c *ClientWithResponses) GetOpenApiSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecResponse, error) {
	rsp, err := c.GetOpenApiSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenApiSpecResponse(rsp)
}

// CheckOperationWithBodyWithResponse request with arbitrary body returning *CheckOperationResponse
func (c *ClientWithResponses) CheckOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error) {
	rsp, err := c.CheckOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckOperationResponse(rsp)
}

func (c *ClientWithResponses) CheckOperationWithResponse(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error) {
	rsp, err := c.CheckOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckOperationResponse(rsp)
}

// CreateOperationWithBodyWithResponse request with arbitrary body returning *CreateOperationResponse
func (c *ClientWithResponses) CreateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error) {
	rsp, err := c.CreateOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOperationResponse(rsp)
}

func (c *ClientWithResponses) CreateOperationWithResponse(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error) {
	rsp, err := c.CreateOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOperationResponse(rsp)
}

// DeleteOperationWithBodyWithResponse request with arbitrary body returning *DeleteOperationResponse
func (c *ClientWithResponses) DeleteOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error) {
	rsp, err := c.DeleteOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOperationResponse(rsp)
}

func (c *ClientWithResponses) DeleteOperationWithResponse(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error) {
	rsp, err := c.DeleteOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOperationResponse(rsp)
}

// GetOperationWithBodyWithResponse request with arbitrary body returning *GetOperationResponse
func (c *ClientWithResponses) GetOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOperationResponse, error) {
	rsp, err := c.GetOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOperationResponse(rsp)
}

func (c *ClientWithResponses) GetOperationWithResponse(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOperationResponse, error) {
	rsp, err := c.GetOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOperationResponse(rsp)
}

// ListOperationsForConnectionWithBodyWithResponse request with arbitrary body returning *ListOperationsForConnectionResponse
func (c *ClientWithResponses) ListOperationsForConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error) {
	rsp, err := c.ListOperationsForConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOperationsForConnectionResponse(rsp)
}

func (c *ClientWithResponses) ListOperationsForConnectionWithResponse(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error) {
	rsp, err := c.ListOperationsForConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOperationsForConnectionResponse(rsp)
}

// UpdateOperationWithBodyWithResponse request with arbitrary body returning *UpdateOperationResponse
func (c *ClientWithResponses) UpdateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error) {
	rsp, err := c.UpdateOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOperationWithResponse(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error) {
	rsp, err := c.UpdateOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperationResponse(rsp)
}

// ExecuteDestinationCheckConnectionWithBodyWithResponse request with arbitrary body returning *ExecuteDestinationCheckConnectionResponse
func (c *ClientWithResponses) ExecuteDestinationCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error) {
	rsp, err := c.ExecuteDestinationCheckConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteDestinationCheckConnectionResponse(rsp)
}

func (c *ClientWithResponses) ExecuteDestinationCheckConnectionWithResponse(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error) {
	rsp, err := c.ExecuteDestinationCheckConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteDestinationCheckConnectionResponse(rsp)
}

// ExecuteSourceCheckConnectionWithBodyWithResponse request with arbitrary body returning *ExecuteSourceCheckConnectionResponse
func (c *ClientWithResponses) ExecuteSourceCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error) {
	rsp, err := c.ExecuteSourceCheckConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceCheckConnectionResponse(rsp)
}

func (c *ClientWithResponses) ExecuteSourceCheckConnectionWithResponse(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error) {
	rsp, err := c.ExecuteSourceCheckConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceCheckConnectionResponse(rsp)
}

// ExecuteSourceDiscoverSchemaWithBodyWithResponse request with arbitrary body returning *ExecuteSourceDiscoverSchemaResponse
func (c *ClientWithResponses) ExecuteSourceDiscoverSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error) {
	rsp, err := c.ExecuteSourceDiscoverSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceDiscoverSchemaResponse(rsp)
}

func (c *ClientWithResponses) ExecuteSourceDiscoverSchemaWithResponse(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error) {
	rsp, err := c.ExecuteSourceDiscoverSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceDiscoverSchemaResponse(rsp)
}

// GetSourceDefinitionSpecificationWithBodyWithResponse request with arbitrary body returning *GetSourceDefinitionSpecificationResponse
func (c *ClientWithResponses) GetSourceDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error) {
	rsp, err := c.GetSourceDefinitionSpecificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionSpecificationResponse(rsp)
}

func (c *ClientWithResponses) GetSourceDefinitionSpecificationWithResponse(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error) {
	rsp, err := c.GetSourceDefinitionSpecification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionSpecificationResponse(rsp)
}

// CreateSourceDefinitionWithBodyWithResponse request with arbitrary body returning *CreateSourceDefinitionResponse
func (c *ClientWithResponses) CreateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error) {
	rsp, err := c.CreateSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateSourceDefinitionWithResponse(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error) {
	rsp, err := c.CreateSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceDefinitionResponse(rsp)
}

// GetSourceDefinitionWithBodyWithResponse request with arbitrary body returning *GetSourceDefinitionResponse
func (c *ClientWithResponses) GetSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error) {
	rsp, err := c.GetSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) GetSourceDefinitionWithResponse(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error) {
	rsp, err := c.GetSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionResponse(rsp)
}

// ListSourceDefinitionsWithResponse request returning *ListSourceDefinitionsResponse
func (c *ClientWithResponses) ListSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsResponse, error) {
	rsp, err := c.ListSourceDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourceDefinitionsResponse(rsp)
}

// ListSourceDefinitionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListSourceDefinitionsForWorkspaceResponse
func (c *ClientWithResponses) ListSourceDefinitionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsForWorkspaceResponse, error) {
	rsp, err := c.ListSourceDefinitionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourceDefinitionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListSourceDefinitionsForWorkspaceWithResponse(ctx context.Context, body ListSourceDefinitionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsForWorkspaceResponse, error) {
	rsp, err := c.ListSourceDefinitionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourceDefinitionsForWorkspaceResponse(rsp)
}

// ListLatestSourceDefinitionsWithResponse request returning *ListLatestSourceDefinitionsResponse
func (c *ClientWithResponses) ListLatestSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestSourceDefinitionsResponse, error) {
	rsp, err := c.ListLatestSourceDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLatestSourceDefinitionsResponse(rsp)
}

// UpdateSourceDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateSourceDefinitionResponse
func (c *ClientWithResponses) UpdateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error) {
	rsp, err := c.UpdateSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSourceDefinitionWithResponse(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error) {
	rsp, err := c.UpdateSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceDefinitionResponse(rsp)
}

// CheckConnectionToSourceWithBodyWithResponse request with arbitrary body returning *CheckConnectionToSourceResponse
func (c *ClientWithResponses) CheckConnectionToSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error) {
	rsp, err := c.CheckConnectionToSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToSourceWithResponse(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error) {
	rsp, err := c.CheckConnectionToSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceResponse(rsp)
}

// CheckConnectionToSourceForUpdateWithBodyWithResponse request with arbitrary body returning *CheckConnectionToSourceForUpdateResponse
func (c *ClientWithResponses) CheckConnectionToSourceForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToSourceForUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceForUpdateResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToSourceForUpdateWithResponse(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToSourceForUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceForUpdateResponse(rsp)
}

// CreateSourceWithBodyWithResponse request with arbitrary body returning *CreateSourceResponse
func (c *ClientWithResponses) CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

func (c *ClientWithResponses) CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

// DeleteSourceWithBodyWithResponse request with arbitrary body returning *DeleteSourceResponse
func (c *ClientWithResponses) DeleteSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error) {
	rsp, err := c.DeleteSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteSourceWithResponse(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error) {
	rsp, err := c.DeleteSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceResponse(rsp)
}

// DiscoverSchemaForSourceWithBodyWithResponse request with arbitrary body returning *DiscoverSchemaForSourceResponse
func (c *ClientWithResponses) DiscoverSchemaForSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error) {
	rsp, err := c.DiscoverSchemaForSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiscoverSchemaForSourceResponse(rsp)
}

func (c *ClientWithResponses) DiscoverSchemaForSourceWithResponse(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error) {
	rsp, err := c.DiscoverSchemaForSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiscoverSchemaForSourceResponse(rsp)
}

// GetSourceWithBodyWithResponse request with arbitrary body returning *GetSourceResponse
func (c *ClientWithResponses) GetSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceResponse, error) {
	rsp, err := c.GetSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceResponse(rsp)
}

func (c *ClientWithResponses) GetSourceWithResponse(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceResponse, error) {
	rsp, err := c.GetSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceResponse(rsp)
}

// ListSourcesForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListSourcesForWorkspaceResponse
func (c *ClientWithResponses) ListSourcesForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error) {
	rsp, err := c.ListSourcesForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListSourcesForWorkspaceWithResponse(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error) {
	rsp, err := c.ListSourcesForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesForWorkspaceResponse(rsp)
}

// UpdateSourceWithBodyWithResponse request with arbitrary body returning *UpdateSourceResponse
func (c *ClientWithResponses) UpdateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSourceWithResponse(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

// GetStateWithBodyWithResponse request with arbitrary body returning *GetStateResponse
func (c *ClientWithResponses) GetStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

func (c *ClientWithResponses) GetStateWithResponse(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

// WebBackendCreateConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendCreateConnectionResponse
func (c *ClientWithResponses) WebBackendCreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error) {
	rsp, err := c.WebBackendCreateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendCreateConnectionWithResponse(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error) {
	rsp, err := c.WebBackendCreateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendCreateConnectionResponse(rsp)
}

// WebBackendGetConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendGetConnectionResponse
func (c *ClientWithResponses) WebBackendGetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error) {
	rsp, err := c.WebBackendGetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendGetConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendGetConnectionWithResponse(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error) {
	rsp, err := c.WebBackendGetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendGetConnectionResponse(rsp)
}

// WebBackendListConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *WebBackendListConnectionsForWorkspaceResponse
func (c *ClientWithResponses) WebBackendListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) WebBackendListConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListConnectionsForWorkspaceResponse(rsp)
}

// WebBackendUpdateConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendUpdateConnectionResponse
func (c *ClientWithResponses) WebBackendUpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error) {
	rsp, err := c.WebBackendUpdateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendUpdateConnectionWithResponse(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error) {
	rsp, err := c.WebBackendUpdateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendUpdateConnectionResponse(rsp)
}

// WebBackendRecreateDestinationWithBodyWithResponse request with arbitrary body returning *WebBackendRecreateDestinationResponse
func (c *ClientWithResponses) WebBackendRecreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendRecreateDestinationResponse, error) {
	rsp, err := c.WebBackendRecreateDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendRecreateDestinationResponse(rsp)
}

func (c *ClientWithResponses) WebBackendRecreateDestinationWithResponse(ctx context.Context, body WebBackendRecreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendRecreateDestinationResponse, error) {
	rsp, err := c.WebBackendRecreateDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendRecreateDestinationResponse(rsp)
}

// WebBackendRecreateSourceWithBodyWithResponse request with arbitrary body returning *WebBackendRecreateSourceResponse
func (c *ClientWithResponses) WebBackendRecreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendRecreateSourceResponse, error) {
	rsp, err := c.WebBackendRecreateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendRecreateSourceResponse(rsp)
}

func (c *ClientWithResponses) WebBackendRecreateSourceWithResponse(ctx context.Context, body WebBackendRecreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendRecreateSourceResponse, error) {
	rsp, err := c.WebBackendRecreateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendRecreateSourceResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithBodyWithResponse request with arbitrary body returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithBodyWithResponse request with arbitrary body returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// GetWorkspaceBySlugWithBodyWithResponse request with arbitrary body returning *GetWorkspaceBySlugResponse
func (c *ClientWithResponses) GetWorkspaceBySlugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error) {
	rsp, err := c.GetWorkspaceBySlugWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceBySlugResponse(rsp)
}

func (c *ClientWithResponses) GetWorkspaceBySlugWithResponse(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error) {
	rsp, err := c.GetWorkspaceBySlug(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceBySlugResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// ListAllWorkspacesPaginatedWithBodyWithResponse request with arbitrary body returning *ListAllWorkspacesPaginatedResponse
func (c *ClientWithResponses) ListAllWorkspacesPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAllWorkspacesPaginatedResponse, error) {
	rsp, err := c.ListAllWorkspacesPaginatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllWorkspacesPaginatedResponse(rsp)
}

func (c *ClientWithResponses) ListAllWorkspacesPaginatedWithResponse(ctx context.Context, body ListAllWorkspacesPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*ListAllWorkspacesPaginatedResponse, error) {
	rsp, err := c.ListAllWorkspacesPaginated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllWorkspacesPaginatedResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// ParsePublicCreateJobResponse parses an HTTP response from a PublicCreateJobWithResponse call
func ParsePublicCreateJobResponse(rsp *http.Response) (*PublicCreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConnectionResponse parses an HTTP response from a CreateConnectionWithResponse call
func ParseCreateConnectionResponse(rsp *http.Response) (*CreateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionResponse parses an HTTP response from a DeleteConnectionWithResponse call
func ParseDeleteConnectionResponse(rsp *http.Response) (*DeleteConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListConnectionsForWorkspaceResponse parses an HTTP response from a ListConnectionsForWorkspaceWithResponse call
func ParseListConnectionsForWorkspaceResponse(rsp *http.Response) (*ListConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListConnectionsForWorkspacesPaginatedResponse parses an HTTP response from a ListConnectionsForWorkspacesPaginatedWithResponse call
func ParseListConnectionsForWorkspacesPaginatedResponse(rsp *http.Response) (*ListConnectionsForWorkspacesPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectionsForWorkspacesPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseResetConnectionResponse parses an HTTP response from a ResetConnectionWithResponse call
func ParseResetConnectionResponse(rsp *http.Response) (*ResetConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSyncConnectionResponse parses an HTTP response from a SyncConnectionWithResponse call
func ParseSyncConnectionResponse(rsp *http.Response) (*SyncConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionResponse parses an HTTP response from a UpdateConnectionWithResponse call
func ParseUpdateConnectionResponse(rsp *http.Response) (*UpdateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExportArchiveResponse parses an HTTP response from a ExportArchiveWithResponse call
func ParseExportArchiveResponse(rsp *http.Response) (*ExportArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportArchiveResponse parses an HTTP response from a ImportArchiveWithResponse call
func ParseImportArchiveResponse(rsp *http.Response) (*ImportArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDestinationDefinitionSpecificationResponse parses an HTTP response from a GetDestinationDefinitionSpecificationWithResponse call
func ParseGetDestinationDefinitionSpecificationResponse(rsp *http.Response) (*GetDestinationDefinitionSpecificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationDefinitionSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionSpecificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateDestinationDefinitionResponse parses an HTTP response from a CreateDestinationDefinitionWithResponse call
func ParseCreateDestinationDefinitionResponse(rsp *http.Response) (*CreateDestinationDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDestinationDefinitionResponse parses an HTTP response from a GetDestinationDefinitionWithResponse call
func ParseGetDestinationDefinitionResponse(rsp *http.Response) (*GetDestinationDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListDestinationDefinitionsResponse parses an HTTP response from a ListDestinationDefinitionsWithResponse call
func ParseListDestinationDefinitionsResponse(rsp *http.Response) (*ListDestinationDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDestinationDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLatestDestinationDefinitionsResponse parses an HTTP response from a ListLatestDestinationDefinitionsWithResponse call
func ParseListLatestDestinationDefinitionsResponse(rsp *http.Response) (*ListLatestDestinationDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLatestDestinationDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDestinationDefinitionResponse parses an HTTP response from a UpdateDestinationDefinitionWithResponse call
func ParseUpdateDestinationDefinitionResponse(rsp *http.Response) (*UpdateDestinationDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToDestinationResponse parses an HTTP response from a CheckConnectionToDestinationWithResponse call
func ParseCheckConnectionToDestinationResponse(rsp *http.Response) (*CheckConnectionToDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToDestinationForUpdateResponse parses an HTTP response from a CheckConnectionToDestinationForUpdateWithResponse call
func ParseCheckConnectionToDestinationForUpdateResponse(rsp *http.Response) (*CheckConnectionToDestinationForUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToDestinationForUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateDestinationResponse parses an HTTP response from a CreateDestinationWithResponse call
func ParseCreateDestinationResponse(rsp *http.Response) (*CreateDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteDestinationResponse parses an HTTP response from a DeleteDestinationWithResponse call
func ParseDeleteDestinationResponse(rsp *http.Response) (*DeleteDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDestinationResponse parses an HTTP response from a GetDestinationWithResponse call
func ParseGetDestinationResponse(rsp *http.Response) (*GetDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListDestinationsForWorkspaceResponse parses an HTTP response from a ListDestinationsForWorkspaceWithResponse call
func ParseListDestinationsForWorkspaceResponse(rsp *http.Response) (*ListDestinationsForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDestinationsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateDestinationResponse parses an HTTP response from a UpdateDestinationWithResponse call
func ParseUpdateDestinationResponse(rsp *http.Response) (*UpdateDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetHealthCheckResponse parses an HTTP response from a GetHealthCheckWithResponse call
func ParseGetHealthCheckResponse(rsp *http.Response) (*GetHealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelJobResponse parses an HTTP response from a CancelJobWithResponse call
func ParseCancelJobResponse(rsp *http.Response) (*CancelJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateJobResponse parses an HTTP response from a CreateJobWithResponse call
func ParseCreateJobResponse(rsp *http.Response) (*CreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobInfoResponse parses an HTTP response from a GetJobInfoWithResponse call
func ParseGetJobInfoResponse(rsp *http.Response) (*GetJobInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListJobsForResponse parses an HTTP response from a ListJobsForWithResponse call
func ParseListJobsForResponse(rsp *http.Response) (*ListJobsForResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobsForResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetLogsResponse parses an HTTP response from a GetLogsWithResponse call
func ParseGetLogsResponse(rsp *http.Response) (*GetLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTryNotificationConfigResponse parses an HTTP response from a TryNotificationConfigWithResponse call
func ParseTryNotificationConfigResponse(rsp *http.Response) (*TryNotificationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TryNotificationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOpenApiSpecResponse parses an HTTP response from a GetOpenApiSpecWithResponse call
func ParseGetOpenApiSpecResponse(rsp *http.Response) (*GetOpenApiSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenApiSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckOperationResponse parses an HTTP response from a CheckOperationWithResponse call
func ParseCheckOperationResponse(rsp *http.Response) (*CheckOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckOperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateOperationResponse parses an HTTP response from a CreateOperationWithResponse call
func ParseCreateOperationResponse(rsp *http.Response) (*CreateOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOperationResponse parses an HTTP response from a DeleteOperationWithResponse call
func ParseDeleteOperationResponse(rsp *http.Response) (*DeleteOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOperationResponse parses an HTTP response from a GetOperationWithResponse call
func ParseGetOperationResponse(rsp *http.Response) (*GetOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListOperationsForConnectionResponse parses an HTTP response from a ListOperationsForConnectionWithResponse call
func ParseListOperationsForConnectionResponse(rsp *http.Response) (*ListOperationsForConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOperationsForConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateOperationResponse parses an HTTP response from a UpdateOperationWithResponse call
func ParseUpdateOperationResponse(rsp *http.Response) (*UpdateOperationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteDestinationCheckConnectionResponse parses an HTTP response from a ExecuteDestinationCheckConnectionWithResponse call
func ParseExecuteDestinationCheckConnectionResponse(rsp *http.Response) (*ExecuteDestinationCheckConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteDestinationCheckConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteSourceCheckConnectionResponse parses an HTTP response from a ExecuteSourceCheckConnectionWithResponse call
func ParseExecuteSourceCheckConnectionResponse(rsp *http.Response) (*ExecuteSourceCheckConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteSourceCheckConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteSourceDiscoverSchemaResponse parses an HTTP response from a ExecuteSourceDiscoverSchemaWithResponse call
func ParseExecuteSourceDiscoverSchemaResponse(rsp *http.Response) (*ExecuteSourceDiscoverSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteSourceDiscoverSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDiscoverSchemaRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceDefinitionSpecificationResponse parses an HTTP response from a GetSourceDefinitionSpecificationWithResponse call
func ParseGetSourceDefinitionSpecificationResponse(rsp *http.Response) (*GetSourceDefinitionSpecificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceDefinitionSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionSpecificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateSourceDefinitionResponse parses an HTTP response from a CreateSourceDefinitionWithResponse call
func ParseCreateSourceDefinitionResponse(rsp *http.Response) (*CreateSourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceDefinitionResponse parses an HTTP response from a GetSourceDefinitionWithResponse call
func ParseGetSourceDefinitionResponse(rsp *http.Response) (*GetSourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListSourceDefinitionsResponse parses an HTTP response from a ListSourceDefinitionsWithResponse call
func ParseListSourceDefinitionsResponse(rsp *http.Response) (*ListSourceDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSourceDefinitionsForWorkspaceResponse parses an HTTP response from a ListSourceDefinitionsForWorkspaceWithResponse call
func ParseListSourceDefinitionsForWorkspaceResponse(rsp *http.Response) (*ListSourceDefinitionsForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourceDefinitionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLatestSourceDefinitionsResponse parses an HTTP response from a ListLatestSourceDefinitionsWithResponse call
func ParseListLatestSourceDefinitionsResponse(rsp *http.Response) (*ListLatestSourceDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLatestSourceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSourceDefinitionResponse parses an HTTP response from a UpdateSourceDefinitionWithResponse call
func ParseUpdateSourceDefinitionResponse(rsp *http.Response) (*UpdateSourceDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToSourceResponse parses an HTTP response from a CheckConnectionToSourceWithResponse call
func ParseCheckConnectionToSourceResponse(rsp *http.Response) (*CheckConnectionToSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToSourceForUpdateResponse parses an HTTP response from a CheckConnectionToSourceForUpdateWithResponse call
func ParseCheckConnectionToSourceForUpdateResponse(rsp *http.Response) (*CheckConnectionToSourceForUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToSourceForUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateSourceResponse parses an HTTP response from a CreateSourceWithResponse call
func ParseCreateSourceResponse(rsp *http.Response) (*CreateSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSourceResponse parses an HTTP response from a DeleteSourceWithResponse call
func ParseDeleteSourceResponse(rsp *http.Response) (*DeleteSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDiscoverSchemaForSourceResponse parses an HTTP response from a DiscoverSchemaForSourceWithResponse call
func ParseDiscoverSchemaForSourceResponse(rsp *http.Response) (*DiscoverSchemaForSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiscoverSchemaForSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDiscoverSchemaRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceResponse parses an HTTP response from a GetSourceWithResponse call
func ParseGetSourceResponse(rsp *http.Response) (*GetSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListSourcesForWorkspaceResponse parses an HTTP response from a ListSourcesForWorkspaceWithResponse call
func ParseListSourcesForWorkspaceResponse(rsp *http.Response) (*ListSourcesForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourcesForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateSourceResponse parses an HTTP response from a UpdateSourceWithResponse call
func ParseUpdateSourceResponse(rsp *http.Response) (*UpdateSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetStateResponse parses an HTTP response from a GetStateWithResponse call
func ParseGetStateResponse(rsp *http.Response) (*GetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendCreateConnectionResponse parses an HTTP response from a WebBackendCreateConnectionWithResponse call
func ParseWebBackendCreateConnectionResponse(rsp *http.Response) (*WebBackendCreateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendCreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendGetConnectionResponse parses an HTTP response from a WebBackendGetConnectionWithResponse call
func ParseWebBackendGetConnectionResponse(rsp *http.Response) (*WebBackendGetConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendGetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendListConnectionsForWorkspaceResponse parses an HTTP response from a WebBackendListConnectionsForWorkspaceWithResponse call
func ParseWebBackendListConnectionsForWorkspaceResponse(rsp *http.Response) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendListConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendUpdateConnectionResponse parses an HTTP response from a WebBackendUpdateConnectionWithResponse call
func ParseWebBackendUpdateConnectionResponse(rsp *http.Response) (*WebBackendUpdateConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendUpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendRecreateDestinationResponse parses an HTTP response from a WebBackendRecreateDestinationWithResponse call
func ParseWebBackendRecreateDestinationResponse(rsp *http.Response) (*WebBackendRecreateDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendRecreateDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendRecreateSourceResponse parses an HTTP response from a WebBackendRecreateSourceWithResponse call
func ParseWebBackendRecreateSourceResponse(rsp *http.Response) (*WebBackendRecreateSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendRecreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceBySlugResponse parses an HTTP response from a GetWorkspaceBySlugWithResponse call
func ParseGetWorkspaceBySlugResponse(rsp *http.Response) (*GetWorkspaceBySlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceBySlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAllWorkspacesPaginatedResponse parses an HTTP response from a ListAllWorkspacesPaginatedWithResponse call
func ParseListAllWorkspacesPaginatedResponse(rsp *http.Response) (*ListAllWorkspacesPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllWorkspacesPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
